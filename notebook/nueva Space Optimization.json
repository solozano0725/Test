{
	"name": "nueva Space Optimization",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DefaultPoolasww",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/73f88e6b-3a35-4612-b550-555157e7059f/resourceGroups/GLOBAL-BREWDAT-SANDBOX-MAZ101-RG-GB-DEV/providers/Microsoft.Synapse/workspaces/aswweudevasx130/bigDataPools/DefaultPoolasww",
				"name": "DefaultPoolasww",
				"type": "Spark",
				"endpoint": "https://aswweudevasx130.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DefaultPoolasww",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## Configuracion de entorno\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": []
				},
				"source": [
					"from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient, __version__ # Escritura Archivo Excel con Pandas\n",
					"from pyspark import SparkConf, SparkContext, SparkFiles\n",
					"import pandas as pd\n",
					"import numpy as np\n",
					"import datetime\n",
					"import math\n",
					"import configparser\n",
					"import ssl\n",
					"import io\n",
					"import sys\n",
					"import random as rd \n",
					"today = datetime.date.today() #+ datetime.timedelta(-1)\n",
					"\n",
					"today = today - datetime.timedelta(days=5)\n",
					"print(today)\n",
					"'''     \n",
					"    ELIMINAR\n",
					"    ELIMINAR\n",
					"    ELIMINAR\n",
					"    ELIMINAR\n",
					"    ELIMINAR!!!\n",
					"    ELIMINAR\n",
					"    ELIMINAR\n",
					"    ELIMINAR\n",
					"    ELIMINAR\n",
					"    ELIMINAR\n",
					"    ELIMINA R\n",
					"'''\n",
					"\n",
					"\n",
					"ssl._create_default_https_context = ssl._create_unverified_context\n",
					"\n",
					"pd.options.mode.chained_assignment = None\n",
					"\n",
					"config = configparser.ConfigParser()\n",
					"\n",
					"demanda_date = today - datetime.timedelta(days = today.weekday())# + datetime.timedelta(-7)\n",
					"\n",
					"# today = datetime.datetime(2021, 4, 26).strftime(\"%Y-%m-%d\")\n",
					"\n",
					"local_inputs_path = 'log/space_optimization/input/'\n",
					"\n",
					"local_params_path = 'log/space_optimization/catalog/'\n",
					"\n",
					"name_param_pesos = \"Pesos.xlsx\"\n",
					"name_param_sku = \"SKU.xlsx\"\n",
					"name_param_origenes = \"Origenes.xlsx\"\n",
					"name_param_destinos = \"Destinos.xlsx\"\n",
					"name_plan_distribucion = \"PlanDistribucion_\" + str(today) + '.xlsx'\n",
					"name_flota_disponible = \"FlotaDisponible_\" + str(today) + '.xlsx'\n",
					"# name_flota_disponible_cumbaya = \"FlotaDisponibleCumbaya_\" + str(today) + '.xlsx'\n",
					"name_inventario = \"Inventario_\" + str(today) + '.xlsx'\n",
					"name_demanda = \"Demanda_\" + str(demanda_date) + '.xlsx'\n",
					"\n",
					"count = 0\n",
					"\n",
					"current_priority =  0\n",
					"\n",
					"list_assigned = []\n",
					"list_assigned_result = []\n",
					"list_assigned_result_mediciones = []\n",
					"\n",
					"columns_name = [\"Origen\", \"Destino\", \"SKU\", \"Tipo Pallet\", \n",
					"                \"Tipo Vehiculo\", \"Placa Asignada\", \"Espacios Camion sin asignar\", \n",
					"                \"Pallets Demanda Asignados\", \"Pallets Demanda sin asignar\", \n",
					"                \"Carga max\", \"Peso Camion sin asignar\", \"Peso Pallet\", \n",
					"                \"Principal\", \"Inv\"]\n",
					"\n",
					"columns_name_result = [\"Pedido\", \"Venta Distribuidor\", \"Clase de Pedido\", \n",
					"                       \"Fecha Entrega\", \"Org. Compras\", \"Grupo Compras\", \n",
					"                       \"Centro Origen\", \"Almacen Origen\", \"Centro Destino\", \n",
					"                       \"Almacen Destino\", \"Proveedor\", \"Solicitante\", \n",
					"                       \"Material\", \"Cantidad\", \"Lote\", \n",
					"                       \"Transporte\", \"Clase Transporte\", \"Puesto Planificacion\", \n",
					"                       \"Transportista\", \"Vehículo\", \"Gestión esp.\", \n",
					"                       \"Inicio Transporte\", \"Fin Transporte\", \"Identif. Ext. 1\", \n",
					"                       \"Texto Adicional 1\", \"Texto Adicional 2\", \"Texto Adicional 3\", \n",
					"                       \"Texto Adicional 4\"]\n",
					"\n",
					"columns_name_result_mediciones = ['N pedido', 'Centro Origen', 'Centro Destino', \n",
					"                                  'Material', 'Cajas', 'Peso', 'Fecha', 'T.VEHICULO']"
				],
				"attachments": null,
				"execution_count": 53
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Configuracion escritura y lectura de archivos\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Lectura\n",
					"url = 'https://sta130maz130rsqovup5cso.blob.core.windows.net/'\n",
					"container = 'mex'\n",
					"path_to_input = 'log/space_optimization/input/'\n",
					"sas_key = '?sv=2020-02-10&ss=bfqt&srt=sco&sp=rwdlacupx&se=2023-01-01T05:59:59Z&st=2021-05-05T02:18:40Z&spr=https&sig=B3pf31i46AO6wsfE1C9fzsTesU2yyc2IA1xgV%2Big2sU%3D'\n",
					"\n",
					"# Escritura\n",
					"\n",
					"output = io.BytesIO() # Para escribir en en blob storage con pandas es necesario transformar la salida a binario\n",
					"\n",
					"connect_str = 'DefaultEndpointsProtocol=https;AccountName=sta130maz130rsqovup5cso;AccountKey=GLwzwfGG5aQuYXRrvs6adHjAg7+ADF8A+NKeul4dOdos22pX1J6uVYOEh6/kNG89DXK7kxYEU3mElTRfHoKCfA==;EndpointSuffix=core.windows.net'\n",
					"container_name = 'mex' # NO añadir separador (\"/\")\n",
					"output_file_name = 'log/space_optimization/output/Resultado_SpaceOpt_Medicion_' + str(today + datetime.timedelta(1)) + '.csv'\n",
					"output_file_sap_name = 'log/space_optimization/output/Resultado_SpaceOpt_' + str(today + datetime.timedelta(1)) + '.csv'\n",
					"# Context\n",
					"\n",
					"linked_service_name = 'Mex'\n",
					"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linked_service_name)\n",
					"\n",
					"blob_account_name = 'sta130maz130rsqovup5cso'\n",
					"blob_container_name = 'mex'"
				],
				"attachments": null,
				"execution_count": 54
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Carga de Scripts\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# Configure blob sorage in Spark\n",
					"\n",
					"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\n",
					"\n",
					"\n",
					"# Add python files to spark context\n",
					"\n",
					"path_to_file = 'log/space_optimization/script/'\n",
					"\n",
					"file_list = ['data_load.py',\n",
					"             'fleet.py',\n",
					"             'vehicle.py'\n",
					"            ]\n",
					"\n",
					"for file_ in file_list:\n",
					"    path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, path_to_file + file_)\n",
					"    sc.addFile(path)\n",
					"\n",
					"    \n",
					"import data_load as dl\n",
					"import fleet as ft\n",
					"import vehicle as v"
				],
				"attachments": null,
				"execution_count": 55
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Archivo de configuración de cubicación\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"config.read_dict({'JUMBO PLUS': {'slots_uno': '38',\n",
					"                                'slots_media': '0',\n",
					"                                'slots_extra': '8',\n",
					"                                },\n",
					"                    'JUMBO': {  'slots_uno': '30',\n",
					"                                'slots_media': '0',\n",
					"                                'slots_extra': '0',\n",
					"                            },\n",
					"                    'JUMBO MEDIA': {'slots_uno': '24',\n",
					"                                    'slots_media': '8',\n",
					"                                    'slots_extra': '0',\n",
					"                                    },\n",
					"                    'JUMBO 2021': {'slots_uno': '6',\n",
					"                                    'slots_media': '20',\n",
					"                                    'slots_extra': '0',\n",
					"                                    },\n",
					"                    'SIDER': {  'slots_uno': '21',\n",
					"                                'slots_media': '2',\n",
					"                                'slots_extra': '0',\n",
					"                                },\n",
					"                    'Inventario': {'min_weight': '1',\n",
					"                                    'max_weight': '2',\n",
					"                                    'max_pallets': '26'\n",
					"                                    }\n",
					"                })\n",
					"\n",
					"max_peso_inventario = float(config['Inventario']['max_weight'])\n",
					"min_peso_inventario = float(config['Inventario']['min_weight'])\n",
					"max_inv_pallets = int(config['Inventario']['max_pallets'])"
				],
				"attachments": null,
				"execution_count": 56
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Carga Parámetros\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"print(url + container + '/' + local_params_path)\n",
					"print(name_param_origenes + sas_key)\n",
					"df_param_origenes = dl.read_excel(path = url + container + '/' + local_params_path,\n",
					"                                  file_name = name_param_origenes + sas_key,\n",
					"                                  sheet_number = 0)\n",
					"\n",
					"df_param_destinos = dl.read_excel(path = url + container + '/' + local_params_path,\n",
					"                                  file_name = name_param_destinos + sas_key,\n",
					"                                  sheet_number = 0)\n",
					"\n",
					"df_param_pesos = dl.read_excel(path = url + container +  '/' + local_params_path,\n",
					"                               file_name = name_param_pesos + sas_key,\n",
					"                               sheet_number = 0)\n",
					"\n",
					"df_param_sku = dl.read_excel(path = url + container +  '/' + local_params_path,\n",
					"                             file_name = name_param_sku + sas_key,\n",
					"                             sheet_number = 0,\n",
					"                             limit_columns = [\"Codigo\", \"SKU\", \"Tipo de pallet\", \n",
					"                                              \"# Unidades / Empaque\", \"# SKU x Pallet\", \n",
					"                                              \"Peso Gramos\", \"Contenido en CC\", \"Hectolitros x palet\", \n",
					"                                              \"Peso toneladas\"],\n",
					"                             rename_columns = [\"SKU\", \"SKU_Descripcion\", \"Tipo Pallet\", \n",
					"                                               \"Unidades Empaque\", \"Empaques Pallet\", \"Peso total Gr Empaque\", \n",
					"                                               \"Unidad CC\", \"HL Pallet\", \"Toneladas Pallet\"])\n",
					"\n",
					"df_param_sku[\"SKU\"] = df_param_sku[\"SKU\"].apply(str)\n",
					"df_param_sku[\"HL Pallet\"] = df_param_sku[\"HL Pallet\"].apply(float)"
				],
				"attachments": null,
				"execution_count": 57
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Carga Inputs\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"import random\n",
					"prioridad = random.uniform(0, 1)\n",
					"\n",
					"df_plan_distribucion = dl.read_excel(path = url + container + '/' + local_inputs_path,\n",
					"                                     file_name = name_plan_distribucion + sas_key,\n",
					"                                     sheet_number = 0,\n",
					"                                     limit_columns = [\"Fecha\", \"Deposito Origen\", \"Deposito Destino\", \n",
					"                                                      \"cod Sku\", \"Producto\", \"Cantidad\"],\n",
					"                                     rename_columns = [\"Fecha\", \"CodeOrigen\", \"CodeDestino\", \n",
					"                                                       \"SKU\", \"Descripcion\", \"Pallets Demanda\"])\n",
					"\n",
					"df_plan_distribucion[\"Prioridad\"] = prioridad                           # prioridad aleatoria uniforme entre 0 y 1\n",
					"df_plan_distribucion[\"SKU\"] = df_plan_distribucion[\"SKU\"].apply(str)\n",
					"\n",
					"# agregando los SKU al plan de distribucion correspondiente\n",
					"df_plan_distribucion = df_plan_distribucion.merge(df_param_sku[[\"SKU\", \"Tipo Pallet\", \"HL Pallet\", \"Toneladas Pallet\"]],\n",
					"                                                  how = \"left\",\n",
					"                                                  left_on = [\"SKU\"],\n",
					"                                                  right_on = [\"SKU\"])\n",
					"df_plan_distribucion = df_plan_distribucion[df_plan_distribucion[\"Tipo Pallet\"].notna()]\n",
					"\n",
					"df_plan_distribucion[\"HL Plan\"] = df_plan_distribucion[\"Pallets Demanda\"] * df_plan_distribucion[\"HL Pallet\"]\n",
					"df_plan_distribucion[\"Toneladas Plan\"] = df_plan_distribucion[\"Pallets Demanda\"] * df_plan_distribucion[\"Toneladas Pallet\"]\n",
					"\n",
					"df_plan_distribucion[\"Tipo Pallet\"] = df_plan_distribucion[\"Tipo Pallet\"].apply(str.strip)\n",
					"\n",
					"# agregando los origenes correspondientes \n",
					"df_plan_distribucion = df_plan_distribucion.merge(df_param_origenes[[\"Origen\", \"CodeOrigen\"]], \n",
					"                                                  left_on = [\"CodeOrigen\"], \n",
					"                                                  right_on = [\"CodeOrigen\"])\n",
					"\n",
					"# agregando los destinos correspondientes\n",
					"df_plan_distribucion = df_plan_distribucion.merge(df_param_destinos[[\"Destino\", \"CodeDestino\"]], \n",
					"                                                  left_on = [\"CodeDestino\"], \n",
					"                                                  right_on = [\"CodeDestino\"])\n",
					"\n",
					"df_plan_distribucion = df_plan_distribucion[[\"Fecha\", \"Origen\", \"Destino\", \n",
					"                                             \"SKU\", \"Pallets Demanda\", \"Prioridad\", \n",
					"                                             \"Tipo Pallet\", \"HL Pallet\", \"Toneladas Pallet\", \n",
					"                                             \"HL Plan\", \"Toneladas Plan\"]]\n",
					"\n",
					"df_pd = df_plan_distribucion.copy()\n",
					"\n",
					"fecha = name_flota_disponible.split('_')[1].split('.')[0]                   # seleccionando la fecha guardada en el nombre\n",
					"\n",
					"print(name_flota_disponible)\n",
					"df_flota_disponible = dl.read_excel(path = url + container + '/' + local_inputs_path,\n",
					"                                    file_name = name_flota_disponible + sas_key,\n",
					"                                    sheet_number = 0,\n",
					"                                    limit_columns = [\"Planta\", \"ID de Transportista\", \n",
					"                                                     \"Transportista\", \"Placa\", \"Tipo de Vh\", \"Fecha disponible\"],\n",
					"                                    rename_columns = [\"Planta\", \"ID OPL\", \"OPL\", \n",
					"                                                      \"Placa\", \"Tipo\", \"Fecha\"])\n",
					"fecha = today + datetime.timedelta(days=1) \n",
					"print(df_flota_disponible)\n",
					"df_flota_disponible = df_flota_disponible[df_flota_disponible['Fecha'] == fecha]    # flota disp para la fecha D + 1, definida en la carga de excel.\n",
					"print(df_flota_disponible)\n",
					"\n",
					"df_flota_disponible.loc[df_flota_disponible[\"Tipo\"] == 'JUMBO 1/2', \"Tipo\"] = 'JUMBO MEDIA'\n",
					"\n",
					"df_flota_disponible.loc[df_flota_disponible[\"Tipo\"] == 'JUMBO NUEVO', \"Tipo\"] = 'JUMBO 2021'\n",
					"\n",
					"df_flota_disponible[\"ID OPL\"] = df_flota_disponible[\"ID OPL\"].apply(str)\n",
					"\n",
					"# agregando los origenes a la flota disponible\n",
					"df_flota_disponible = df_flota_disponible.merge(df_param_origenes[[\"Origen\", \"Planta2\"]],\n",
					"                                                how=\"left\",\n",
					"                                                left_on =\"Planta\",\n",
					"                                                right_on = \"Planta2\")\n",
					"\n",
					"# agregando los pesos correspondientes por Placa\n",
					"df_flota_disponible = df_flota_disponible.merge(df_param_pesos[[\"Placa\", \"Peso vacio\", \"Carga min\", \"Carga max\", \"Peso cabezal\", \"PVB MIN\", \"PVB MAX\"]],\n",
					"                                                how = \"left\",\n",
					"                                                left_on = [\"Placa\"],\n",
					"                                                right_on = [\"Placa\"])\n",
					"\n",
					"\n",
					"df_inventario = dl.read_excel(path = url + container + '/' + local_inputs_path,\n",
					"                            file_name = name_inventario + sas_key,\n",
					"                            sheet_number = 0,\n",
					"                            limit_columns = [\"Ce.\", \"Alm.\", \"Material\", \n",
					"                                             \"Lote\", \"Libre utiliz.\"],\n",
					"                            rename_columns = [\"Origen\", \"Almacen\", \"SKU\", \n",
					"                                              \"Lote\", \"Inventario Unidades\"])\n",
					"\n",
					"df_inventario = df_inventario[df_inventario[\"Origen\"].isin([\"DEAA\", \"DEAB\"])]\n",
					"\n",
					"df_inventario = df_inventario.groupby([\"Origen\", \"Almacen\", \n",
					"                                       \"SKU\", \"Lote\"]).agg({\"Inventario Unidades\":\"sum\"}).reset_index()\n",
					"\n",
					"df_inventario[\"SKU\"] = df_inventario[\"SKU\"].apply(str)\n",
					"\n",
					"# Agregando los SKU correspondientes al inventario\n",
					"df_inventario = df_inventario.merge(df_param_sku[[\"SKU\", \"Empaques Pallet\", \n",
					"                                                  \"Tipo Pallet\", \"Toneladas Pallet\"]],\n",
					"                                    left_on = [\"SKU\"],\n",
					"                                    right_on = [\"SKU\"])\n",
					"\n",
					"df_inventario[\"Inventario Pallets\"] = df_inventario[\"Inventario Unidades\"] / df_inventario[\"Empaques Pallet\"]\n",
					"\n",
					"df_inventario[\"Inventario Pallets\"] = df_inventario[\"Inventario Pallets\"].apply(math.floor)\n",
					"\n",
					"df_inventario = df_inventario[(df_inventario[\"Toneladas Pallet\"] >= min_peso_inventario) & \n",
					"                              (df_inventario[\"Toneladas Pallet\"] <= max_peso_inventario)]\n",
					"\n",
					"df_demanda = dl.read_excel(path = url + container + '/' + local_inputs_path,\n",
					"                            file_name = name_demanda + sas_key,\n",
					"                            sheet_number = 0,\n",
					"                            limit_columns = ['Cod. Depot', 'Codigo Sap', 'Categoría',\n",
					"                                             'Day', 'Volumen'],\n",
					"                            rename_columns = ['Destino', 'SKU', 'Tipo', \n",
					"                                              'Fecha', 'HL'])\n",
					"df_demanda = df_demanda[df_demanda['Fecha'] == demanda_date]\n",
					"\n",
					"df_demanda['Fecha'] = df_demanda['Fecha'].dt.strftime('%Y-%m-%d')\n",
					"\n",
					"df_demanda['SKU'] = df_demanda['SKU'].apply(str)\n",
					"\n",
					"print('DEMANDA', df_demanda)\n",
					"\n",
					"# agregando a la demanda los SKU correspondientes\n",
					"df_demanda = df_demanda.merge(df_param_sku[['SKU', 'Tipo Pallet', 'Toneladas Pallet', 'HL Pallet']],\n",
					"                              left_on = ['SKU'],\n",
					"                              right_on = ['SKU'])\n",
					"print('DEMANDA', df_demanda)\n",
					"\n",
					"df_demanda['Pallets Demanda'] = round(df_demanda['HL'] / df_demanda['HL Pallet'])\n",
					"\n",
					"df_demanda = df_demanda[df_demanda['Pallets Demanda'] > 0]\n",
					"\n",
					"df_demanda['Tipo Pallet'] = df_demanda['Tipo Pallet'].str.split()\n",
					"\n",
					"# agregando inventario a la demanda\n",
					"df_demanda = df_demanda.merge(df_inventario[['Origen', 'SKU', 'Inventario Pallets']],\n",
					"                             left_on = ['SKU'],\n",
					"                             right_on = ['SKU'])\n",
					"\n",
					"df_demanda = df_demanda[df_demanda['Pallets Demanda'] <= df_demanda['Inventario Pallets']]\n",
					"\n",
					"df_demanda = df_demanda[['Origen', 'Destino', 'SKU', 'Fecha', 'Tipo Pallet', 'Toneladas Pallet', 'Pallets Demanda']]\n",
					""
				],
				"attachments": null,
				"execution_count": 58
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Preparación de datos\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_flota = df_flota_disponible.copy()    \n",
					"print(df_flota[['Placa', 'Tipo']])\n",
					"\n",
					"list_assigned = []\n",
					"list_assigned_sap = []\n",
					"\n",
					"columns_name_standard = ['No Pedido', 'Origen', 'Destino', \n",
					"                         'SKU', 'Tipo Vehiculo', 'Tipo Pallet', \n",
					"                         'Placa', 'Pallets Asignados', 'Peso Asignado', \n",
					"                         'Peso Pallet', 'Pallets Sobrantes', 'Fuente Asignacion', \n",
					"                         'Parte vehículo', 'Tipo SKU']\n",
					"\n",
					"columns_name_sap = ['Pedido', 'Venta Distribuidor', 'Clase de Pedido',\n",
					"                    'Fecha Entrega', 'Org. Compras', 'Grupo Compras',\n",
					"                    'Centro Origen', 'Almacen Origen', 'Centro Destino',\n",
					"                    'Almacen Destino', 'Proveedor', 'Solicitante',\n",
					"                    'Material', 'Cantidad', 'Lote',\n",
					"                    'Transporte', 'Clase Transporte', 'Puesto Planificación',\n",
					"                    'Transportista', 'Vehículo', 'Gestión esp.',\n",
					"                    'Inicio Transporte', 'Fin Transporte', 'Identif. Ext. 1',\n",
					"                    'Texto Adicional 1', 'Texto Adicional 2', 'Texto Adicional 3',\n",
					"                    'Texto Adicional']\n",
					"\n",
					"count = 0\n",
					"\n",
					"df_result = pd.DataFrame()\n",
					"\n",
					"vehicles = ['JUMBO MEDIA','JUMBO 2021', 'JUMBO',  'JUMBO PLUS',  'SIDER']\n",
					"\n",
					"df_list = pd.DataFrame()\n",
					""
				],
				"attachments": null,
				"execution_count": 59
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## SELECION DE OBJETOS\r\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def Seleccion( SKUs, vehiculo, count ):\r\n",
					"    SKUs = SKUs.sort_values(\"Prioridad\", ascending = False)        # Ordenamos de mayor (izquierda) a menor (derecha)\r\n",
					"    \r\n",
					"    df_vehiculo = vehiculo.copy()\r\n",
					"    # Espacios del vehiculo\r\n",
					"\r\n",
					"    vehiculo = {'origen': vehiculo['Origen'],\r\n",
					"                'placa': vehiculo['Placa'],\r\n",
					"                'tipo': vehiculo['Tipo'],\r\n",
					"                'slots1': int(config[vehiculo['Tipo']]['slots_uno']),\r\n",
					"                'slots1_2': int(config[vehiculo['Tipo']]['slots_media']),\r\n",
					"                'slotsExtra': int(config[vehiculo['Tipo']]['slots_extra']),\r\n",
					"                'cargados1': 0,\r\n",
					"                'cargados1_2': 0,\r\n",
					"                'cargadosExtra': 0,\r\n",
					"                'PesoTotal': round(vehiculo['PesoTotal'],4),\r\n",
					"                'PesoMin': round(vehiculo['Carga min'],4),\r\n",
					"                'PesoMax': round(vehiculo['Carga max'],4),\r\n",
					"                'PesoSKU':  0\r\n",
					"                }\r\n",
					"    \r\n",
					"    out = {}\r\n",
					"    df_out = []                                                                     # formato para matriz, cuerpo de un df\r\n",
					"    SKUs = SKUs.rename(columns={'Peso Pallet': 'Toneladas Pallet'})\r\n",
					"    \r\n",
					"    # ------------------------------------------ PRIMERA ITERACION SOBRE LOS SKU ------------------------------------\r\n",
					"    for index, fila in SKUs.iterrows():                            # iterando sobra cada sku\r\n",
					"        no_pedido = '_' + str(32) + str(today).replace(\"-\", \"\") + str(count)\r\n",
					"        vehiculo['pedido'] = no_pedido\r\n",
					"\r\n",
					"        cargados1 = 0\r\n",
					"        cargados1_2 = 0\r\n",
					"        cargadosExtra = 0\r\n",
					"\r\n",
					"        #print('SKU \\n',fila[['SKU','Tipo']])\r\n",
					"        sku = {'Origen':  fila['Origen'],\r\n",
					"                'Destino':  fila['Destino'],\r\n",
					"                'SKU': fila['SKU'], \r\n",
					"                'Tipo Pallet': fila['Tipo Pallet'],\r\n",
					"                'Peso Pallet': round(fila['Toneladas Pallet'],4), \r\n",
					"                'Pallets Demanda': fila[\"Pallets Demanda\"],\r\n",
					"                'Prioridad': fila[\"Prioridad\"],\r\n",
					"                'palets_aceptadas': 0,\r\n",
					"                'palets_rechazadas': 0\r\n",
					"                }\r\n",
					"        if sku['Tipo Pallet'] == '1/1':                                                   # tipo de palet actual\r\n",
					"            \r\n",
					"            for n_palet in range(1, sku['Pallets Demanda'] + 1):                          # para la cantidad de palet en demanda\r\n",
					"\r\n",
					"                vehiculo['PesoTotal'] += sku['Peso Pallet']                               # sumando el peso de un sku individual al peso total              \r\n",
					"                PesoReal = vehiculo['PesoTotal'] * 1000.0                               \r\n",
					"\r\n",
					"                if vehiculo['cargados1'] < vehiculo['slots1']:                           # si hay espacios de palets 1/1\r\n",
					"                    \r\n",
					"                    if PesoReal <= vehiculo['PesoMax'] :                                  # si el peso mas la palet no sobrepasa el peso maximo\r\n",
					"                        cargados1 += 1                                        # agrega un palet a la cargaz del vehiculo\r\n",
					"                        sku['palets_aceptadas'] += 1                                      # sumamos una palet aceptada\r\n",
					"                    else:\r\n",
					"                        sku['palets_rechazadas'] += 1                                     # si el peso del palet supera el total, mandala a la lista rechazados\r\n",
					"                        vehiculo['PesoTotal'] -= sku['Peso Pallet']                        # quita el peso agregado previamente\r\n",
					"                else:\r\n",
					"                    \r\n",
					"                    if vehiculo['cargadosExtra'] < vehiculo['slotsExtra']:                 # si hay espacios en carreta\r\n",
					"                        if PesoReal <= vehiculo['PesoMax'] :                                        # si el peso mas la palet no sobrepasa el peso maximo\r\n",
					"                            cargadosExtra += 1                                 # agrega una palet extra\r\n",
					"                            sku['palets_aceptadas'] += 1\r\n",
					"                        else:                                                              # si hay espacio extra pero el peso es mas que el maximo\r\n",
					"                            vehiculo['PesoTotal'] -= sku['Peso Pallet']                     # quita el peso agregado \r\n",
					"                            sku['palets_rechazadas'] += 1 \r\n",
					"                    else:                                                                   # si no hay ningun espacio\r\n",
					"                        vehiculo['PesoTotal'] -= sku['Peso Pallet']                          # quita el peso agregado \r\n",
					"                        sku['palets_rechazadas'] += 1               \r\n",
					"        \r\n",
					"        #  --------------------------------- CARGA PALETS 1/2\r\n",
					"        elif sku['Tipo Pallet'] == '1/2':                                               # tipo de palet actual\r\n",
					"            \r\n",
					"            for n_palet in range(1, sku['Pallets Demanda'] + 1):                          # para la cantidad de palet en demanda\r\n",
					"\r\n",
					"                vehiculo['PesoTotal'] += sku['Peso Pallet']                               # sumando el peso de un sku individual al peso total              \r\n",
					"                PesoReal = vehiculo['PesoTotal'] * 1000.0                               \r\n",
					"\r\n",
					"                if vehiculo['cargados1_2'] < vehiculo['slots1_2']:                           # si hay espacios de palets 1/2\r\n",
					"                    \r\n",
					"                    if PesoReal <= vehiculo['PesoMax'] :                                  # si el peso mas la palet no sobrepasa el peso maximo\r\n",
					"                        cargados1_2 += 1                                        # agrega un palet a la carga del vehiculo\r\n",
					"                        sku['palets_aceptadas'] += 1                                      # sumamos una palet aceptada\r\n",
					"                    else:\r\n",
					"                        sku['palets_rechazadas'] += 1                                     # si el peso del palet supera el total, mandala a la lista rechazados\r\n",
					"                        vehiculo['PesoTotal'] -= sku['Peso Pallet']                        # quita el peso agregado previamente\r\n",
					"                else:\r\n",
					"                    vehiculo['PesoTotal'] -= sku['Peso Pallet']                          # quita el peso agregado \r\n",
					"                    sku['palets_rechazadas'] += 1               \r\n",
					"        \r\n",
					"        vehiculo['cargados1'] = cargados1\r\n",
					"        vehiculo['cargados1_2'] = cargados1_2\r\n",
					"        vehiculo['cargadosExtra'] = cargadosExtra\r\n",
					"        vehiculo['PesoSKU'] = vehiculo['cargados1'] * sku['Peso Pallet'] \r\n",
					"\r\n",
					"        #print('SKU', sku)\r\n",
					"        #print('VEHICULO', vehiculo)\r\n",
					"        out.update(sku)\r\n",
					"        out.update(vehiculo)                                                             # concatenando los dos diccionarios\r\n",
					"        df_out.append(list(out.values()))                                                # agregando una lista de los valores\r\n",
					"    \r\n",
					"    \r\n",
					"    # ------------------------------------------ SI LA COMBINACION DE SKU NO CUMPLE LA CARGA  ------------------------------------\r\n",
					"    salida = pd.DataFrame(data=df_out, columns=out.keys())                               # dataframe del estado de cada sku\r\n",
					"    salida['PesoTotal'] = salida['PesoTotal']*1000\r\n",
					"    vehiculo['PesoTotal'] = vehiculo['PesoTotal']*1000\r\n",
					"    if vehiculo['PesoTotal'] <= vehiculo['PesoMin']:                                  # si el peso calculado es menor al minimo requerido\r\n",
					"    \r\n",
					"        sku = salida\r\n",
					"        sku_sobrantes = sku[sku['palets_rechazadas'] > 0]                               \r\n",
					"        sku_aceptados = sku[sku['palets_aceptadas'] > 0]\r\n",
					"        nuevos = pd.DataFrame([])\r\n",
					"        viejos = pd.DataFrame([])\r\n",
					"        # ----- cambiando palets!!                                  # \r\n",
					"        for index1, sku_cargado in sku_aceptados.iterrows():\r\n",
					"            espacio_faltante = (sku_cargado['PesoMax'] - sku_cargado['PesoTotal'])/1000\r\n",
					"\r\n",
					"            for index2, sku_rechazado in sku_sobrantes.iterrows():\r\n",
					"\r\n",
					"                if sku_rechazado['Peso Pallet'] > espacio_faltante:                                 # si el peso indiv. de un sku es mayor al espacio que falta\r\n",
					"                    pass   \r\n",
					"                else:\r\n",
					"                    print('SKU QUE CABE:', sku_rechazado['SKU'], sku_rechazado['Peso Pallet'], espacio_faltante)\r\n",
					"\r\n",
					"                    peso_palets = (sku_rechazado['Peso Pallet'] * sku_rechazado['palets_rechazadas'])*1000     # carga total de las palets rechazadas\r\n",
					"                    peso_carga = (sku_cargado['Peso Pallet'] * sku_cargado['palets_aceptadas'])*1000\r\n",
					"                    peso_sin_carga = vehiculo['PesoTotal'] - peso_carga                              # carga total sin el sku\r\n",
					"                    peso_simulado = peso_palets + peso_sin_carga                                                \r\n",
					"\r\n",
					"                    if (peso_simulado > sku_cargado['PesoMin']) and (peso_simulado < sku_cargado['PesoMax']):    # si el peso de los rechazados optimiza mejor que el cargado\r\n",
					"                        sku_cargado['PesoTotal'] = peso_simulado\r\n",
					"                        sku_cargado['palets_rechazadas'] += sku_rechazado['palets_aceptadas']                        # quita el sku cargado del camion\r\n",
					"                        sku_cargado['palets_aceptadas'] = 0\r\n",
					"\r\n",
					"                        sku_rechazado['PesoTotal'] = peso_simulado\r\n",
					"                        sku_rechazado['palets_aceptadas'] += sku_rechazado['palets_rechazadas']                     # agrega los sku rechazados.\r\n",
					"                        sku_rechazado['palets_rechazadas'] = 0\r\n",
					"                        break\r\n",
					"                    else:        \r\n",
					"                        carga_parcial = 0\r\n",
					"                        for i_palet in range(1, sku_rechazado['palets_rechazadas']+1):\r\n",
					"                            carga_parcial += sku_rechazado['Peso Pallet']                                               # peso de i palets \r\n",
					" \r\n",
					"                            total = vehiculo['PesoTotal'] + (carga_parcial*1000)\r\n",
					"\r\n",
					"                            if (total > vehiculo['PesoMin']) and (total < vehiculo['PesoMax']):               # si la carga parcial llena el espacio faltant\r\n",
					"                                nuevo_sku = sku_rechazado\r\n",
					"                                nuevo_sku['PesoTotal'] = total\r\n",
					"                                nuevo_sku['palets_aceptadas'] = i_palet                                      # cantidad de palets aceptadas\r\n",
					"                                nuevo_sku['palets_rechazadas'] -= i_palet   \r\n",
					"\r\n",
					"                                viejo1 = nuevo_sku[nuevo_sku['palets_rechazadas']>0]\r\n",
					"                                #viejos = pd.concat([viejos, viejo1])\r\n",
					"                                if nuevo_sku['Tipo Pallet'] == '1/1':\r\n",
					"                                    if vehiculo['cargados1'] < vehiculo['slots1']:                          # si quedan expacios en 1/1\r\n",
					"                                        nuevo_sku['cargados1'] = vehiculo['cargados1'] + i_palet\r\n",
					"                                    else:\r\n",
					"                                        nuevo_sku['cargadosExtra'] = vehiculo['cargadosExtra'] + i_palet\r\n",
					"                                else:\r\n",
					"                                    if vehiculo['cargados1_2'] < vehiculo['slots1_2']:                          # si quedan expacios en 1/1\r\n",
					"                                        nuevo_sku['cargados1_2'] = vehiculo['cargados1_2'] + i_palet\r\n",
					"                                    else:\r\n",
					"                                        nuevo_sku = pd.DataFrame([])\r\n",
					"\r\n",
					"                                nuevos = pd.concat([nuevos, nuevo_sku])\r\n",
					"                                \r\n",
					"        salida = pd.concat([sku_aceptados])\r\n",
					"        return salida\r\n",
					"    else:\r\n",
					"        return salida\r\n",
					"    "
				],
				"attachments": null,
				"execution_count": 60
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Cubicación\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"print(df_plan_distribucion.columns)\r\n",
					"print(df_demanda.columns)\r\n",
					"print(df_flota.columns)\r\n",
					"\r\n",
					"from IPython.display import display\r\n",
					"pd.options.display.max_columns = None\r\n",
					"#pd.options.display.max_rows = None\r\n",
					"\r\n",
					"df_flota.drop_duplicates(subset =\"Placa\", keep = 'first', inplace = True)\r\n",
					"df_flota = df_flota.reset_index(drop=True)\r\n",
					"\r\n",
					"df_flota['PesoTotal'] = 0\r\n",
					"df_flota['PaletsCargados1'] = 0\r\n",
					"df_flota['PaletsCargados1_2'] = 0\r\n",
					"df_flota['PaletsCargadosExtra'] = 0\r\n",
					"df_flota['PesoSKU'] = 0\r\n",
					"\r\n",
					"Output_final = pd.DataFrame([])\r\n",
					"\r\n",
					"# ordenando la flota por vehiculo de preferencia\r\n",
					"flota_ordenada = pd.DataFrame([],columns=df_flota.columns)\r\n",
					"for tipo in ['JUMBO PLUS', 'JUMBO', 'JUMBO MEDIA','SIDER','JUMBO 2021']:\r\n",
					"    tipo_flota = df_flota[df_flota['Tipo'] == tipo]\r\n",
					"    flota_ordenada = pd.concat([flota_ordenada,tipo_flota])\r\n",
					"flota_ordenada['PesoTotal'] = flota_ordenada['PesoTotal'].astype(float)\r\n",
					"count = 0\r\n",
					"origenes = pd.unique(df_plan_distribucion['Origen'])            # agrupando sku de origen a destino\r\n",
					"placa_cargada = []\r\n",
					"for origen in origenes:\r\n",
					"    destinos = pd.unique(df_plan_distribucion['Destino'])\r\n",
					"    for dest in destinos:\r\n",
					"\r\n",
					"        skus = df_plan_distribucion[(df_plan_distribucion['Origen'] == origen) & (df_plan_distribucion['Destino'] == dest)]             # dividiendo sku por destinos         \r\n",
					"        flota = flota_ordenada[flota_ordenada['Origen'] == origen]                                                                      # flota disponible dividida por origenes\r\n",
					"\r\n",
					"        flota_llena = pd.DataFrame([])              # flota por destino\r\n",
					"        skus_actual = skus\r\n",
					"        if skus.empty:                                                                                                                  # si no tngo sku para i destino\r\n",
					"            pass\r\n",
					"        else: \r\n",
					"            flota['Carga min'] = flota['Carga min'].fillna(0.0)\r\n",
					"            flota['Carga max'] = flota['Carga max'].fillna(0.0)\r\n",
					"            for index_v, vehiculo in flota.iterrows():   \r\n",
					"\r\n",
					"                \r\n",
					"                if vehiculo['Placa'] in placa_cargada:                                                # si existe la placa en la flota llena\r\n",
					"                    pass\r\n",
					"                else:\r\n",
					"                    asignacion = Seleccion(skus_actual, vehiculo, count)                                                                                                 # asignale una carga optima\r\n",
					"                    vehiculo_lleno = asignacion[asignacion['palets_aceptadas']>0]\r\n",
					"                    placa_cargada.append(vehiculo['Placa'])\r\n",
					"                    count += 1\r\n",
					"                    palets_sobrantes = asignacion[asignacion['palets_rechazadas']>0]\r\n",
					"\r\n",
					"                    palets_sobrantes['Pallets Demanda'] = palets_sobrantes['palets_rechazadas']     # reemplazando las sobrantes por la nueva demanda\r\n",
					"                    palets_sobrantes = palets_sobrantes[palets_sobrantes['Pallets Demanda'] > 0]    # todo lo que tenga demanda \r\n",
					"                    palets_sobrantes['palets_aceptadas'] = 0                                        # reemplazando los palets cargados y no a 0\r\n",
					"                    palets_sobrantes['palets_rechazadas'] = 0\r\n",
					"                                                                                                    # reemplazando los sku por los sobrantes\r\n",
					"                    flota_llena = pd.concat([flota_llena, vehiculo_lleno])                          \r\n",
					"                    \r\n",
					"                    sku = palets_sobrantes\r\n",
					"                    \r\n",
					"                    if palets_sobrantes.empty:\r\n",
					"                        break\r\n",
					"                    else:\r\n",
					"                        skus_actual = palets_sobrantes\r\n",
					"                        continue\r\n",
					"                \r\n",
					"        Output_final = pd.concat([Output_final, flota_llena])\r\n",
					"    \r\n",
					"Output_final = Output_final.reset_index(drop=True)\r\n",
					""
				],
				"attachments": null,
				"execution_count": 69
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Exportación de resultado\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"Output_final.drop_duplicates(subset =['placa', 'PesoTotal'], keep = 'first', inplace = True)\n",
					"Output_final = Output_final.reset_index(drop=True)\n",
					"Output_final = Output_final.rename(columns = {'PesoTotal': 'Peso Acumulado',\n",
					"                                               'PesoSKU': 'Peso Desglosado'}, inplace = False)\n",
					"print(Output_final)\n",
					"\n",
					"blob_service_client = BlobServiceClient.from_connection_string(connect_str)\n",
					"\n",
					"blob_client = blob_service_client.get_blob_client(container=container, blob=output_file_name)\n",
					"output = Output_final.to_csv(index=False, encoding=\"utf-8\")\n",
					"blob_client.upload_blob(output, blob_type=\"BlockBlob\", overwrite = True)\n",
					"\n",
					"print(df_flota)\n",
					"# plan distribucion\n",
					"blob_client = blob_service_client.get_blob_client(container=container, blob=output_file_sap_name)\n",
					"output = df_flota.to_csv(index=False, encoding=\"utf-8\")\n",
					"blob_client.upload_blob(output, blob_type=\"BlockBlob\", overwrite = True)"
				],
				"attachments": null,
				"execution_count": 70
			}
		]
	}
}