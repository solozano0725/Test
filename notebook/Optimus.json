{
	"name": "Optimus",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DefaultPoolasww",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/73f88e6b-3a35-4612-b550-555157e7059f/resourceGroups/GLOBAL-BREWDAT-SANDBOX-MAZ101-RG-GB-DEV/providers/Microsoft.Synapse/workspaces/aswweudevasx130/bigDataPools/DefaultPoolasww",
				"name": "DefaultPoolasww",
				"type": "Spark",
				"endpoint": "https://aswweudevasx130.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DefaultPoolasww",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## Configuracion de entorno\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient, __version__ # Escritura Archivo Excel con Pandas\n",
					"from pyspark import SparkConf, SparkContext, SparkFiles\n",
					"import pandas as pd\n",
					"import numpy as np\n",
					"import datetime\n",
					"import math\n",
					"import configparser\n",
					"import ssl\n",
					"import io\n",
					"import sys\n",
					"\n",
					"ssl._create_default_https_context = ssl._create_unverified_context\n",
					"\n",
					"band = True\n",
					"\n",
					"# locale.setlocale(locale.LC_ALL, (\"es_MX\", \"UTF-8\"))\n",
					"today = datetime.date.today()\n",
					"print(today)\n",
					"actual_month = today.strftime(\"%B\").capitalize()\n",
					"\n",
					"if actual_month == 'January':\n",
					"    actual_month = 'Enero'\n",
					"elif actual_month == 'February':\n",
					"    actual_month = 'Febrero'\n",
					"elif actual_month == 'March':\n",
					"    actual_month = 'Marzo'\n",
					"elif actual_month == 'April':\n",
					"    actual_month = 'Abril'\n",
					"elif actual_month == 'May':\n",
					"    actual_month = 'Mayo'\n",
					"elif actual_month == 'June':\n",
					"    actual_month = 'Junio'\n",
					"elif actual_month == 'July':\n",
					"    actual_month = 'Julio'\n",
					"elif actual_month == 'August':\n",
					"    actual_month = 'Agosto'\n",
					"elif actual_month == 'September':\n",
					"    actual_month = 'Septiembre'\n",
					"elif actual_month == 'October':\n",
					"    actual_month = 'Octubre'\n",
					"elif actual_month == 'November':\n",
					"    actual_month = 'Noviembre'\n",
					"elif actual_month == 'December':\n",
					"    actual_month = 'Diciembre'\n",
					"\n",
					"print(actual_month)\n",
					"\n",
					"local_inputs_path = 'log/optimus/input/'\n",
					"\n",
					"local_inputs_path2 = 'log/space_optimization/input/'\n",
					"\n",
					"local_params_path = 'log/optimus/catalog/'\n",
					"\n",
					"local_space_result_path = 'log/space_optimization/output/'\n",
					"\n",
					"tomorrow = today + datetime.timedelta(days=1)\n",
					"name_tarifario = \"Tarifario.xlsx\"\n",
					"name_result = 'Resultado_SpaceOpt_'+ str(tomorrow) +'.xlsx'\n",
					"\n",
					"name_rutas = \"TiemposRutas.xlsx\"\n",
					"name_param_origenes = \"Origenes.xlsx\"\n",
					"name_param_destinos = \"Destinos.xlsx\"\n",
					"name_param_pesos = 'Pesos.xlsx'\n",
					"\n",
					"name_budget = \"Budget.xlsx\"\n",
					"name_viajes = \"Viajes.xlsx\"\n",
					"\n",
					"#name_flota_disponible_aux = \"FlotaDisponible_\" + str(today)\n",
					"\n",
					"name_flota_disponible = \"FlotaDisponible_\" + str(today) + '.xlsx'\n",
					"print(name_flota_disponible)"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Configuracion escritura y lectura de archivos"
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					" # Lectura\n",
					"url = 'https://sta130maz130rsqovup5cso.blob.core.windows.net/'\n",
					"container = 'mex'\n",
					"path_to_input = 'log/optimus/input/'\n",
					"sas_key = '?sv=2020-02-10&ss=bfqt&srt=sco&sp=rwdlacupx&se=2023-01-01T05:59:59Z&st=2021-05-05T02:18:40Z&spr=https&sig=B3pf31i46AO6wsfE1C9fzsTesU2yyc2IA1xgV%2Big2sU%3D'\n",
					"\n",
					"# Escritura\n",
					"\n",
					"output = io.BytesIO() # Para escribir en en blob storage con pandas es necesario transformar la salida a binario\n",
					"\n",
					"connect_str = 'DefaultEndpointsProtocol=https;AccountName=sta130maz130rsqovup5cso;AccountKey=GLwzwfGG5aQuYXRrvs6adHjAg7+ADF8A+NKeul4dOdos22pX1J6uVYOEh6/kNG89DXK7kxYEU3mElTRfHoKCfA==;EndpointSuffix=core.windows.net'\n",
					"container_name = 'mex' # NO añadir separador (\"/\")\n",
					"output_file_name = 'log/optimus/output/Resultado_Optimus_' + str(today + datetime.timedelta(1)) + '.xlsx'\n",
					"\n",
					"# Context\n",
					"\n",
					"linked_service_name = 'Mex'\n",
					"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linked_service_name)\n",
					"\n",
					"blob_account_name = 'sta130maz130rsqovup5cso'\n",
					"blob_container_name = 'mex'"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Carga de Scripts\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# Configure blob sorage in Spark\n",
					"\n",
					"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\n",
					"\n",
					"\n",
					"# Add python files to spark context\n",
					"\n",
					"path_to_file = 'log/space_optimization/script/'\n",
					"\n",
					"file_list = ['data_load.py']\n",
					"\n",
					"for file_ in file_list:\n",
					"    path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, path_to_file + file_)\n",
					"    sc.addFile(path)\n",
					"\n",
					"    \n",
					"import data_load as dl"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Carga Parámetros\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_param_origenes = dl.read_excel(path = url + container + '/' + local_params_path,\n",
					"                                  file_name = name_param_origenes + sas_key,\n",
					"                                  sheet_number = 0)\n",
					"\n",
					"df_param_destinos = dl.read_excel(path = url + container + '/' + local_params_path,\n",
					"                                  file_name = name_param_destinos + sas_key,\n",
					"                                  sheet_number = 0)\n",
					"\n",
					"df_param_pesos = dl.read_excel(path = url + container + '/' + local_params_path,\n",
					"                                      file_name = name_param_pesos,\n",
					"                                      sheet_number = 0)\n",
					""
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"print(url + container + '/' + local_inputs_path + name_flota_disponible + sas_key)"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Carga Inputs\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"print(url + container + '/' + local_inputs_path + name_flota_disponible + sas_key)\n",
					"print(url + container + '/' + local_params_path + name_rutas + sas_key)\n",
					"print(url + container + '/' + local_inputs_path + name_tarifario + sas_key)\n",
					"print(url + container + '/' + local_space_result_path + name_result + sas_key)"
				],
				"attachments": null,
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"df_flota_disponible = dl.read_excel(path = url + container + '/' + local_inputs_path2,\n",
					"                                    file_name = name_flota_disponible + sas_key,\n",
					"                                    sheet_number = 0,\n",
					"                                    limit_columns = [\"Planta\", \"ID de Transportista\",\n",
					"                                                     \"Transportista\", \"Placa\", \"Tipo de Vh\", 'Fecha disponible', 'Hora disponible'],\n",
					"                                    rename_columns = [\"Planta\", \"ID OPL\", \"OPL\", \n",
					"                                                      \"Placa\", \"Tipo\", 'Dia', 'Hora'])\n",
					"\n",
					"df_flota_disponible.loc[df_flota_disponible[\"Tipo\"] == 'JUMBO 1/2', \"Tipo\"] = 'JUMBO MEDIA'\n",
					"\n",
					"df_flota_disponible.loc[df_flota_disponible[\"Tipo\"] == 'JUMBO NUEVO', \"Tipo\"] = 'JUMBO 2021'\n",
					"\n",
					"df_flota_disponible[\"ID OPL\"] = df_flota_disponible[\"ID OPL\"].apply(str)\n",
					"\n",
					"df_flota_disponible = df_flota_disponible.merge(df_param_origenes[[\"Origen\", \"Planta2\"]],\n",
					"                                                how=\"left\",\n",
					"                                                left_on =\"Planta\",\n",
					"                                                right_on = \"Planta2\")\n",
					"                                                \n",
					"\n",
					"df_flota_disponible = df_flota_disponible.merge(df_param_pesos[[\"Placa\", \"Peso vacio\", \"Carga min\", \"Carga max\", \"Peso cabezal\", \"PVB MIN\", \"PVB MAX\"]],\n",
					"                                                how = \"left\",\n",
					"                                                left_on = [\"Placa\"],\n",
					"                                                right_on = [\"Placa\"])\n",
					"\n",
					"\n",
					"df_flota_disponible['Dia'] = df_flota_disponible['Dia'].dt.strftime('%Y-%m-%d')\n",
					"df_flota_disponible['Hora'] = [i.split(' ')[-1] for i in df_flota_disponible['Hora'].astype(str)]\n",
					"\n",
					"df_flota_disponible['Hora'] = df_flota_disponible['Hora'].astype(str)\n",
					"\n",
					"\n",
					"df_flota_disponible['Disponibilidad'] = pd.to_datetime(df_flota_disponible['Dia'] + ' ' + df_flota_disponible['Hora'])\n",
					"\n",
					"\n",
					"df_flota_a = df_flota_disponible[[\"Placa\", \"Dia\"]]\n",
					"\n",
					"df_flota_a.columns = [\"Vehículo\", \"Fecha\"]\n",
					"\n",
					"\n",
					"df_f = df_flota_disponible[[\"Origen\", \"ID OPL\", \"OPL\", \"Placa\", \"Tipo\"]].groupby([\"Origen\", \"ID OPL\", \"OPL\", \"Tipo\"]).count().reset_index()\n",
					"\n",
					"df_rutas = pd.read_excel(url + container + '/' + local_params_path + name_rutas + sas_key, sheet_name = 0, engine='openpyxl')\n",
					"\n",
					"df_rutas_aux = df_rutas[[\"Origen SAP\", \"Destino SAP\", \"Ruta Sap\"]]\n",
					"df_rutas_aux.columns = [\"Centro Origen\", \"Centro Destino\", \"Ruta\"]\n",
					"\n",
					"\n",
					"df_tarifario = pd.read_excel(url + container + '/' + local_inputs_path + name_tarifario + sas_key, sheet_name = 0, engine='openpyxl')\n",
					"\n",
					"df_tarifario[\"Prioridad\"] = df_tarifario[\"Prioridad\"].str.extract('(\\d+)')\n",
					"\n",
					"df_tarifario = df_tarifario.sort_values(by = [\"Ruta\", \"Prioridad\"], ascending =[False, True])\n",
					"\n",
					"df_tarifario[\"ID Transportista\"] = df_tarifario[\"ID Transportista\"].apply(str)\n",
					"\n",
					"df_tarifario = df_tarifario[[\"Ruta\", \"Origen\", \"Destino\", \"ID Transportista\", \"Transportista\", \"Tarifa\", \"Prioridad\"]]\n",
					"\n",
					"df_tarifario.columns = [\"Ruta\", \"Centro Origen\", \"Centro Destino\", \"ID\", \"OPL\", \"Tarifa\", \"Prioridad\"]\n",
					"\n",
					"df_tarifario = df_tarifario.merge(df_rutas_aux,\n",
					"                                  how = \"left\",\n",
					"                                  left_on = [\"Ruta\"],\n",
					"                                  right_on = [\"Ruta\"])\n",
					"\n",
					"\n",
					"df_flota = df_flota_disponible[[\"Origen\", \"ID OPL\"]]\n",
					"df_flota = df_flota.drop_duplicates()\n",
					"\n",
					"df_tarifario = df_tarifario.drop([\"Centro Origen_x\", \"Centro Destino_x\"], axis = 1)\n",
					"\n",
					"df_tarifario.columns = [\"Ruta\", \"ID\", \"OPL\", \"Tarifa\", \"Prioridad\", \"Centro Origen\", \"Centro Destino\"]\n",
					"\n",
					"df_tarifario = df_tarifario.merge(df_flota[[\"Origen\", \"ID OPL\"]],   # Tomamos solo las tarifas que tengan flota disponible\n",
					"                                  left_on = [\"Centro Origen\", \"ID\"],\n",
					"                                  right_on = [\"Origen\", \"ID OPL\"])\n",
					"\n",
					"\n",
					"\n",
					"df_space_output = pd.read_excel(url + container + '/' + local_space_result_path + name_result + sas_key, sheet_name = 0, engine='openpyxl')\n",
					"\n",
					"df_space_output = df_space_output.merge(df_rutas_aux,\n",
					"                                        how = \"left\",\n",
					"                                        left_on = [\"Centro Origen\", \"Centro Destino\"],\n",
					"                                        right_on = [\"Centro Origen\", \"Centro Destino\"])\n",
					"\n",
					"df_result = df_space_output[[\"Pedido\", \"Fecha Entrega\", \"Centro Origen\", \"Centro Destino\", \"Ruta\", \"Vehículo\", \"Cantidad\"]]\n",
					"\n",
					"df_result = df_result.groupby([\"Pedido\", \"Fecha Entrega\", \"Centro Origen\", \"Centro Destino\", \"Ruta\", \"Vehículo\"]).agg({\"Cantidad\":\"sum\"}).reset_index()\n",
					"\n",
					"df_result[\"Mes\"] = actual_month\n",
					"\n",
					"\n",
					"\n",
					"df_budget = pd.read_excel(url + container + '/' + local_inputs_path + name_budget + sas_key, sheet_name = 0, engine = 'openpyxl')\n",
					"\n",
					"df_budget = df_budget[~df_budget[\"Centro Destino\"].isna()]\n",
					"\n",
					"df_budget = df_budget.melt(id_vars = [\"Centro Origen\", \"Origen\", \"Centro Destino\", \"Destino\"],\n",
					"                            var_name = \"Mes\",\n",
					"                            value_name = \"Budget\")\n",
					"\n",
					"\n",
					"df_viajes = pd.read_excel(url + container + '/' + local_inputs_path + name_viajes + sas_key, sheet_name = 0, engine = 'openpyxl')\n",
					"\n",
					"df_viajes = df_viajes[~df_viajes[\"Centro Destino\"].isna()]\n",
					"\n",
					"df_viajes = df_viajes.melt(id_vars = [\"Centro Origen\", \"Origen\", \"Centro Destino\", \"Destino\"],\n",
					"                            var_name = \"Mes\",\n",
					"                            value_name = \"Viajes\")\n",
					"\n",
					"df_viajes[\"Viajes\"] = df_viajes[\"Viajes\"].apply(round)\n",
					"\n",
					"df_costo = df_viajes.merge(df_budget,\n",
					"                            how = \"left\",\n",
					"                            left_on = [\"Centro Origen\",\"Centro Destino\", \"Mes\"],\n",
					"                            right_on = [\"Centro Origen\", \"Centro Destino\", \"Mes\"])\n",
					"\n",
					"df_costo.loc[df_costo[\"Budget\"].isna(), \"Budget\"] = 0\n",
					"\n",
					"df_costo[\"Costo Promedio\"] = df_costo[\"Budget\"] / df_costo[\"Viajes\"]\n",
					"\n",
					"\n",
					"df_costo_promedio = df_costo[[\"Centro Origen\", \"Centro Destino\", \"Mes\",\"Viajes\", \"Budget\", \"Costo Promedio\"]]\n",
					"\n",
					"df_costo_promedio = df_costo_promedio[df_costo_promedio[\"Mes\"] == actual_month]\n",
					"\n",
					"\n",
					"\n",
					"prioridad_tarifa = \"3\" # Prioridad usada para comparar vs costo promedio\n",
					"\n",
					"df_result = df_result.merge(df_costo_promedio[[\"Centro Origen\", \"Centro Destino\", \"Mes\", \"Costo Promedio\"]],\n",
					"                            how = \"left\",\n",
					"                            left_on = [\"Centro Origen\", \"Centro Destino\", \"Mes\"],\n",
					"                            right_on = [\"Centro Origen\", \"Centro Destino\", \"Mes\"])\n",
					"\n",
					"df_tarifa_comparativa = df_tarifario[df_tarifario[\"Prioridad\"] <= prioridad_tarifa]\n",
					"\n",
					"df_tarifa_comparativa = df_tarifa_comparativa[[\"Ruta\", \"Tarifa\", \"Prioridad\"]]\n",
					"\n",
					"df_tarifa_comparativa = df_tarifa_comparativa.groupby([\"Ruta\"])\n",
					"\n",
					"df_tarifa_comparativa = df_tarifa_comparativa.max().reset_index()\n",
					"\n",
					"df_result = df_result.merge(df_tarifa_comparativa,\n",
					"                            how = \"left\",\n",
					"                            left_on = [\"Ruta\"],\n",
					"                            right_on = [\"Ruta\"])\n",
					"\n",
					"df_result[\"Diferencia\"] = df_result[\"Costo Promedio\"] - df_result[\"Tarifa\"]\n",
					"\n",
					"df_result = df_result.sort_values(by = [\"Diferencia\"], ascending = [band])\n",
					"\n",
					"\n",
					"items = df_result.values.tolist()\n",
					"list_assigned = []\n",
					""
				],
				"attachments": null,
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"source": [
					"print(df_flota_disponible)"
				],
				"attachments": null,
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Asignación de tarifas\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"for item in items:\n",
					"    print(item[11])\n",
					"    pedido = item[0]\n",
					"    tipo = item[5]\n",
					"    ruta = item[4]\n",
					"    origen = item[2]\n",
					"    \n",
					"    for x in range(5):\n",
					"        \n",
					"        df_tarifa = df_tarifario[(df_tarifario[\"Ruta\"] == ruta) &\n",
					"                                  (df_tarifario[\"Prioridad\"] == str(x + 1))]\n",
					"        \n",
					"        if df_tarifa[\"Ruta\"].count() > 0:\n",
					"            df_tarifa_selected = df_tarifa.values[0]\n",
					"            _tarifa = df_tarifa_selected[3]\n",
					"            _ruta = df_tarifa_selected[0]\n",
					"            _opl = df_tarifa_selected[1]\n",
					"            \n",
					"            df_flota_selected = df_flota_disponible[(df_flota_disponible[\"Origen\"] == origen) &\n",
					"                                                    (df_flota_disponible[\"Tipo\"] == tipo) &\n",
					"                                                    (df_flota_disponible[\"ID OPL\"] == _opl)]\n",
					"            \n",
					"            if df_flota_selected[\"Origen\"].count() > 0:\n",
					"                df_flota_selected = df_flota_selected.values[0]\n",
					"                _placa = df_flota_selected[3]\n",
					"                _dispo = df_flota_selected[15]\n",
					"        \n",
					"                list_assigned.append([pedido, _tarifa, _placa, _opl, _dispo])\n",
					"                \n",
					"                df_flota_disponible = df_flota_disponible[df_flota_disponible[\"Placa\"] != _placa]\n",
					"                break"
				],
				"attachments": null,
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Ajuste de formato de resultado\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_assigned = pd.DataFrame(list_assigned, columns = [\"Pedido\", \"Tarifa\", \"Placa\", \"OPL\", 'Disponibilidad'])\n",
					"\n",
					"df_result = df_result.merge(df_assigned,\n",
					"                            how = \"left\",\n",
					"                            left_on = [\"Pedido\"],\n",
					"                            right_on = [\"Pedido\"])\n",
					"\n",
					"# Adicion de nombres y códigos de destinos\n",
					"df_destinos = df_param_destinos[[\"Destino\", \"Planta\"]]\n",
					"df_destinos.columns = [\"Centro Destino\", \"Nombre Destino\"]\n",
					"\n",
					"df_result = df_result.merge(df_destinos,\n",
					"                            how = \"left\",\n",
					"                            left_on = [\"Centro Destino\"],\n",
					"                            right_on = [\"Centro Destino\"])\n",
					"\n",
					"\n",
					"df_result = df_result.drop([\"Tarifa_x\", \"Prioridad\"], axis = 1)\n",
					"\n",
					"df_result = df_result[[\"Pedido\", \"Fecha Entrega\", \"Mes\", \"Centro Origen\", \"Centro Destino\", \"Nombre Destino\", \"Ruta\", \"Cantidad\", \"Vehículo\", \"OPL\", \"Placa\", 'Disponibilidad' ,\"Diferencia\", \"Costo Promedio\", \"Tarifa_y\"]]\n",
					"\n",
					"df_result.columns = [\"Pedido\", \"Fecha Plan\", \"Mes\", \"Centro Origen\", \"Centro Destino\", \"Nombre Destino\", \"Ruta\", \"Cantidad\", \"Vehículo\", \"OPL\", \"Placa\", 'Inicio Transporte', \"Diferencia\", \"Costo Promedio\", \"Tarifa\"]\n",
					"\n",
					"df_result[\"% Costo Promedio\"] = df_result[\"Tarifa\"] / df_result[\"Costo Promedio\"]\n",
					"\n",
					"df_result[\"Costo Total\"] = df_result[\"Costo Promedio\"] - df_result[\"Tarifa\"]\n",
					"\n",
					"df_result = df_result[~df_result[\"Tarifa\"].isna()]\n",
					"\n",
					"df_result['Fecha Plan'] = today + datetime.timedelta(1)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"print(list_assigned)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Tiempos de viaje\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_rutas = df_rutas[['Ruta Sap', 'Km Oneway', 'TIEMPO ONEWAY']]\n",
					"\n",
					"df_rutas.columns = ['Ruta', 'Distancia Km', 'Tiempo recorrido']\n",
					"\n",
					"\n",
					"df_result = df_result.merge(df_rutas,\n",
					"                            how = 'left',\n",
					"                            left_on = ['Ruta'],\n",
					"                            right_on = ['Ruta'])\n",
					"\n",
					"df_result['Llegada Destino'] = df_result['Inicio Transporte'] + pd.to_timedelta(df_result['Tiempo recorrido'], unit='h')\n",
					"\n",
					"df_result['Retorno Origen'] = df_result['Llegada Destino'] + + pd.to_timedelta(df_result['Tiempo recorrido'], unit='h')\n",
					"\n",
					"df_result = df_result[['Pedido', 'Fecha Plan', 'Mes', 'Centro Origen', 'Centro Destino', 'Nombre Destino', 'Ruta', 'Distancia Km', 'Cantidad', 'Vehículo', 'OPL', 'Placa', 'Inicio Transporte', 'Llegada Destino', 'Retorno Origen', 'Diferencia', 'Costo Promedio', 'Tarifa', '% Costo Promedio', 'Costo Total']]\n",
					"\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Exportación del resultado\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_result.to_excel(output, sheet_name = 'Hoja1', index = False)\n",
					"\n",
					"blob_service_client = BlobServiceClient.from_connection_string(connect_str)\n",
					"blob_client = blob_service_client.get_blob_client(container=container_name, blob=output_file_name)\n",
					"\n",
					"blob_client.upload_blob(output.getvalue(), overwrite = True) # Escribe el resultado en el container especificado tomando los bytes"
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}