{
	"name": "Space Optimization",
	"properties": {
		"nbformat": 0,
		"nbformat_minor": 0,
		"bigDataPool": {
			"referenceName": "DefaultPoolasww",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/73f88e6b-3a35-4612-b550-555157e7059f/resourceGroups/GLOBAL-BREWDAT-SANDBOX-MAZ101-RG-GB-DEV/providers/Microsoft.Synapse/workspaces/aswweudevasx130/bigDataPools/DefaultPoolasww",
				"name": "DefaultPoolasww",
				"type": "Spark",
				"endpoint": "https://aswweudevasx130.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DefaultPoolasww",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"## Configuracion de entorno\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"tags": []
				},
				"source": [
					"from azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient, __version__ # Escritura Archivo Excel con Pandas\n",
					"from pyspark import SparkConf, SparkContext, SparkFiles\n",
					"import pandas as pd\n",
					"import numpy as np\n",
					"import datetime\n",
					"import math\n",
					"import configparser\n",
					"import ssl\n",
					"import io\n",
					"import sys\n",
					"\n",
					"today = datetime.date.today() #+ datetime.timedelta(-1)\n",
					"\n",
					"today = today - datetime.timedelta(days=4)\n",
					"print(today)\n",
					"\n",
					"\n",
					"ssl._create_default_https_context = ssl._create_unverified_context\n",
					"\n",
					"pd.options.mode.chained_assignment = None\n",
					"\n",
					"config = configparser.ConfigParser()\n",
					"\n",
					"demanda_date = today - datetime.timedelta(days = today.weekday())# + datetime.timedelta(-7)\n",
					"\n",
					"# today = datetime.datetime(2021, 4, 26).strftime(\"%Y-%m-%d\")\n",
					"\n",
					"local_inputs_path = 'log/space_optimization/input/'\n",
					"\n",
					"local_params_path = 'log/space_optimization/catalog/'\n",
					"\n",
					"name_param_pesos = \"Pesos.xlsx\"\n",
					"name_param_sku = \"SKU.xlsx\"\n",
					"name_param_origenes = \"Origenes.xlsx\"\n",
					"name_param_destinos = \"Destinos.xlsx\"\n",
					"name_plan_distribucion = \"PlanDistribucion_\" + str(today) + '.xlsx'\n",
					"name_flota_disponible = \"FlotaDisponible_\" + str(today) + '.xlsx'\n",
					"# name_flota_disponible_cumbaya = \"FlotaDisponibleCumbaya_\" + str(today) + '.xlsx'\n",
					"name_inventario = \"Inventario_\" + str(today) + '.xlsx'\n",
					"name_demanda = \"Demanda_\" + str(demanda_date) + '.xlsx'\n",
					"\n",
					"count = 0\n",
					"\n",
					"current_priority =  0\n",
					"\n",
					"list_assigned = []\n",
					"list_assigned_result = []\n",
					"list_assigned_result_mediciones = []\n",
					"\n",
					"columns_name = [\"Origen\", \"Destino\", \"SKU\", \"Tipo Pallet\", \n",
					"                \"Tipo Vehiculo\", \"Placa Asignada\", \"Espacios Camion sin asignar\", \n",
					"                \"Pallets Demanda Asignados\", \"Pallets Demanda sin asignar\", \n",
					"                \"Carga max\", \"Peso Camion sin asignar\", \"Peso Pallet\", \n",
					"                \"Principal\", \"Inv\"]\n",
					"\n",
					"columns_name_result = [\"Pedido\", \"Venta Distribuidor\", \"Clase de Pedido\", \n",
					"                       \"Fecha Entrega\", \"Org. Compras\", \"Grupo Compras\", \n",
					"                       \"Centro Origen\", \"Almacen Origen\", \"Centro Destino\", \n",
					"                       \"Almacen Destino\", \"Proveedor\", \"Solicitante\", \n",
					"                       \"Material\", \"Cantidad\", \"Lote\", \n",
					"                       \"Transporte\", \"Clase Transporte\", \"Puesto Planificacion\", \n",
					"                       \"Transportista\", \"Vehículo\", \"Gestión esp.\", \n",
					"                       \"Inicio Transporte\", \"Fin Transporte\", \"Identif. Ext. 1\", \n",
					"                       \"Texto Adicional 1\", \"Texto Adicional 2\", \"Texto Adicional 3\", \n",
					"                       \"Texto Adicional 4\"]\n",
					"\n",
					"columns_name_result_mediciones = ['N pedido', 'Centro Origen', 'Centro Destino', \n",
					"                                  'Material', 'Cajas', 'Peso', 'Fecha', 'T.VEHICULO']"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Configuracion escritura y lectura de archivos\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Lectura\n",
					"url = 'https://sta130maz130rsqovup5cso.blob.core.windows.net/'\n",
					"container = 'mex'\n",
					"path_to_input = 'log/space_optimization/input/'\n",
					"sas_key = '?sv=2020-02-10&ss=bfqt&srt=sco&sp=rwdlacupx&se=2023-01-01T05:59:59Z&st=2021-05-05T02:18:40Z&spr=https&sig=B3pf31i46AO6wsfE1C9fzsTesU2yyc2IA1xgV%2Big2sU%3D'\n",
					"\n",
					"# Escritura\n",
					"\n",
					"output = io.BytesIO() # Para escribir en en blob storage con pandas es necesario transformar la salida a binario\n",
					"\n",
					"connect_str = 'DefaultEndpointsProtocol=https;AccountName=sta130maz130rsqovup5cso;AccountKey=GLwzwfGG5aQuYXRrvs6adHjAg7+ADF8A+NKeul4dOdos22pX1J6uVYOEh6/kNG89DXK7kxYEU3mElTRfHoKCfA==;EndpointSuffix=core.windows.net'\n",
					"container_name = 'mex' # NO añadir separador (\"/\")\n",
					"output_file_name = 'log/space_optimization/output/Resultado_SpaceOpt_Medicion_' + str(today + datetime.timedelta(1)) + '.xlsx'\n",
					"output_file_sap_name = 'log/space_optimization/output/Resultado_SpaceOpt_' + str(today + datetime.timedelta(1)) + '.xlsx'\n",
					"# Context\n",
					"\n",
					"linked_service_name = 'Mex'\n",
					"blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linked_service_name)\n",
					"\n",
					"blob_account_name = 'sta130maz130rsqovup5cso'\n",
					"blob_container_name = 'mex'"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Carga de Scripts\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"# Configure blob sorage in Spark\n",
					"\n",
					"spark.conf.set('fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name), blob_sas_token)\n",
					"\n",
					"\n",
					"# Add python files to spark context\n",
					"\n",
					"path_to_file = 'log/space_optimization/script/'\n",
					"\n",
					"file_list = ['data_load.py',\n",
					"             'fleet.py',\n",
					"             'vehicle.py'\n",
					"            ]\n",
					"\n",
					"for file_ in file_list:\n",
					"    path = 'wasbs://%s@%s.blob.core.windows.net/%s' % (blob_container_name, blob_account_name, path_to_file + file_)\n",
					"    sc.addFile(path)\n",
					"\n",
					"    \n",
					"import data_load as dl\n",
					"import fleet as ft\n",
					"import vehicle as v"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Archivo de configuración de cubicación\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"config.read_dict({'JUMBO PLUS': {'slots_uno': '38',\n",
					"                                'slots_media': '0',\n",
					"                                'extra_slots': '0',\n",
					"                                'carreta_extra':'True',\n",
					"                                'min_weight': '41',\n",
					"                                'weight_pallet_uno':'0.8',\n",
					"                                'weight_pallet_media':'0',\n",
					"                                'num_pallets_uno':'0',\n",
					"                                'num_pallets_media':'0',\n",
					"                                },\n",
					"                    'JUMBO': {  'slots_uno': '30',\n",
					"                                'slots_media': '0',\n",
					"                                'extra_slots': '0',\n",
					"                                'carreta_extra':'False',\n",
					"                                'min_weight': '30',\n",
					"                                'weight_pallet_uno':'0.9',\n",
					"                                'weight_pallet_media':'0',\n",
					"                                'num_pallets_uno':'0',\n",
					"                                'num_pallets_media':'0'\n",
					"                            },\n",
					"                    'JUMBO MEDIA': {'slots_uno': '24',\n",
					"                                    'slots_media': '8',\n",
					"                                    'extra_slots': '0',\n",
					"                                    'carreta_extra':'False',\n",
					"                                    'min_weight': '30',\n",
					"                                    'weight_pallet_uno':'1.2',\n",
					"                                    'weight_pallet_media':'1',\n",
					"                                    'num_pallets_uno':'0',\n",
					"                                    'num_pallets_media':'0'\n",
					"                                    },\n",
					"                    'JUMBO 2021': {'slots_uno': '6',\n",
					"                                    'slots_media': '20',\n",
					"                                    'extra_slots': '0',\n",
					"                                    'carreta_extra':'False',\n",
					"                                    'min_weight': '30',\n",
					"                                    'weight_pallet_uno':'0.8',\n",
					"                                    'weight_pallet_media':'1.2',\n",
					"                                    'num_pallets_uno':'0',\n",
					"                                    'num_pallets_media':'0'\n",
					"                                    },\n",
					"                    'SIDER': {  'slots_uno': '21',\n",
					"                                'slots_media': '2',\n",
					"                                'extra_slots': '0',\n",
					"                                'carreta_extra':'False',\n",
					"                                'min_weight': '30',\n",
					"                                'weight_pallet_uno':'0.9',\n",
					"                                'weight_pallet_media':'1',\n",
					"                                'num_pallets_uno':'0',\n",
					"                                'num_pallets_media':'0'\n",
					"                                },\n",
					"                    'Inventario': {'min_weight': '1',\n",
					"                                    'max_weight': '2',\n",
					"                                    'max_pallets': '26'\n",
					"                                    }\n",
					"                })\n",
					"\n",
					"max_peso_inventario = float(config['Inventario']['max_weight'])\n",
					"min_peso_inventario = float(config['Inventario']['min_weight'])\n",
					"max_inv_pallets = int(config['Inventario']['max_pallets'])"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Carga Parámetros\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_param_origenes = dl.read_excel(path = url + container + '/' + local_params_path,\n",
					"                                  file_name = name_param_origenes + sas_key,\n",
					"                                  sheet_number = 0)\n",
					"\n",
					"df_param_destinos = dl.read_excel(path = url + container + '/' + local_params_path,\n",
					"                                  file_name = name_param_destinos + sas_key,\n",
					"                                  sheet_number = 0)\n",
					"\n",
					"df_param_pesos = dl.read_excel(path = url + container +  '/' + local_params_path,\n",
					"                               file_name = name_param_pesos + sas_key,\n",
					"                               sheet_number = 0)\n",
					"\n",
					"df_param_sku = dl.read_excel(path = url + container +  '/' + local_params_path,\n",
					"                             file_name = name_param_sku + sas_key,\n",
					"                             sheet_number = 0,\n",
					"                             limit_columns = [\"Codigo\", \"SKU\", \"Tipo de pallet\", \n",
					"                                              \"# Unidades / Empaque\", \"# SKU x Pallet\", \n",
					"                                              \"Peso Gramos\", \"Contenido en CC\", \"Hectolitros x palet\", \n",
					"                                              \"Peso toneladas\"],\n",
					"                             rename_columns = [\"SKU\", \"SKU_Descripcion\", \"Tipo Pallet\", \n",
					"                                               \"Unidades Empaque\", \"Empaques Pallet\", \"Peso total Gr Empaque\", \n",
					"                                               \"Unidad CC\", \"HL Pallet\", \"Toneladas Pallet\"])\n",
					"\n",
					"df_param_sku[\"SKU\"] = df_param_sku[\"SKU\"].apply(str)\n",
					"df_param_sku[\"HL Pallet\"] = df_param_sku[\"HL Pallet\"].apply(float)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Carga Inputs\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"\n",
					"df_plan_distribucion = dl.read_excel(path = url + container + '/' + local_inputs_path,\n",
					"                                     file_name = name_plan_distribucion + sas_key,\n",
					"                                     sheet_number = 0,\n",
					"                                     limit_columns = [\"Fecha\", \"Deposito Origen\", \"Deposito Destino\", \n",
					"                                                      \"cod Sku\", \"Producto\", \"Cantidad\"],\n",
					"                                     rename_columns = [\"Fecha\", \"CodeOrigen\", \"CodeDestino\", \n",
					"                                                       \"SKU\", \"Descripcion\", \"Pallets Demanda\"])\n",
					"\n",
					"df_plan_distribucion[\"Prioridad\"] = df_plan_distribucion[\"SKU\"].index + 1\n",
					"df_plan_distribucion[\"SKU\"] = df_plan_distribucion[\"SKU\"].apply(str)\n",
					"\n",
					"df_plan_distribucion = df_plan_distribucion.merge(df_param_sku[[\"SKU\", \"Tipo Pallet\", \"HL Pallet\", \"Toneladas Pallet\"]],\n",
					"                                                  how = \"left\",\n",
					"                                                  left_on = [\"SKU\"],\n",
					"                                                  right_on = [\"SKU\"])\n",
					"df_plan_distribucion = df_plan_distribucion[df_plan_distribucion[\"Tipo Pallet\"].notna()]\n",
					"\n",
					"df_plan_distribucion[\"HL Plan\"] = df_plan_distribucion[\"Pallets Demanda\"] * df_plan_distribucion[\"HL Pallet\"]\n",
					"df_plan_distribucion[\"Toneladas Plan\"] = df_plan_distribucion[\"Pallets Demanda\"] * df_plan_distribucion[\"Toneladas Pallet\"]\n",
					"\n",
					"df_plan_distribucion[\"Tipo Pallet\"] = df_plan_distribucion[\"Tipo Pallet\"].apply(str.strip)\n",
					"\n",
					"df_plan_distribucion = df_plan_distribucion.merge(df_param_origenes[[\"Origen\", \"CodeOrigen\"]], \n",
					"                                                  left_on = [\"CodeOrigen\"], \n",
					"                                                  right_on = [\"CodeOrigen\"])\n",
					"\n",
					"df_plan_distribucion = df_plan_distribucion.merge(df_param_destinos[[\"Destino\", \"CodeDestino\"]], \n",
					"                                                  left_on = [\"CodeDestino\"], \n",
					"                                                  right_on = [\"CodeDestino\"])\n",
					"\n",
					"df_plan_distribucion = df_plan_distribucion[[\"Fecha\", \"Origen\", \"Destino\", \n",
					"                                             \"SKU\", \"Pallets Demanda\", \"Prioridad\", \n",
					"                                             \"Tipo Pallet\", \"HL Pallet\", \"Toneladas Pallet\", \n",
					"                                             \"HL Plan\", \"Toneladas Plan\"]]\n",
					"\n",
					"df_pd = df_plan_distribucion.copy()\n",
					"\n",
					"fecha = name_flota_disponible.split('_')[1].split('.')[0]                   # seleccionando la fecha guardada en el nombre\n",
					"\n",
					"df_flota_disponible = dl.read_excel(path = url + container + '/' + local_inputs_path,\n",
					"                                    file_name = name_flota_disponible + sas_key,\n",
					"                                    sheet_number = 0,\n",
					"                                    limit_columns = [\"Planta\", \"ID de Transportista\", \n",
					"                                                     \"Transportista\", \"Placa\", \"Tipo de Vh\", \"Fecha disponible\"],\n",
					"                                    rename_columns = [\"Planta\", \"ID OPL\", \"OPL\", \n",
					"                                                      \"Placa\", \"Tipo\", \"Fecha\"])\n",
					"fecha = today + datetime.timedelta(days=1) \n",
					"print(df_flota_disponible)\n",
					"df_flota_disponible = df_flota_disponible[df_flota_disponible['Fecha'] == fecha]    # flota disp para la fecha D + 1, definida en la carga de excel.\n",
					"print(df_flota_disponible)\n",
					"\n",
					"df_flota_disponible.loc[df_flota_disponible[\"Tipo\"] == 'JUMBO 1/2', \"Tipo\"] = 'JUMBO MEDIA'\n",
					"\n",
					"df_flota_disponible.loc[df_flota_disponible[\"Tipo\"] == 'JUMBO NUEVO', \"Tipo\"] = 'JUMBO 2021'\n",
					"\n",
					"df_flota_disponible[\"ID OPL\"] = df_flota_disponible[\"ID OPL\"].apply(str)\n",
					"\n",
					"df_flota_disponible = df_flota_disponible.merge(df_param_origenes[[\"Origen\", \"Planta2\"]],\n",
					"                                                how=\"left\",\n",
					"                                                left_on =\"Planta\",\n",
					"                                                right_on = \"Planta2\")\n",
					"\n",
					"df_flota_disponible = df_flota_disponible.merge(df_param_pesos[[\"Placa\", \"Peso vacio\", \"Carga min\", \"Carga max\", \"Peso cabezal\", \"PVB MIN\", \"PVB MAX\"]],\n",
					"                                                how = \"left\",\n",
					"                                                left_on = [\"Placa\"],\n",
					"                                                right_on = [\"Placa\"])\n",
					"\n",
					"df_inventario = dl.read_excel(path = url + container + '/' + local_inputs_path,\n",
					"                            file_name = name_inventario + sas_key,\n",
					"                            sheet_number = 0,\n",
					"                            limit_columns = [\"Ce.\", \"Alm.\", \"Material\", \n",
					"                                             \"Lote\", \"Libre utiliz.\"],\n",
					"                            rename_columns = [\"Origen\", \"Almacen\", \"SKU\", \n",
					"                                              \"Lote\", \"Inventario Unidades\"])\n",
					"\n",
					"df_inventario = df_inventario[df_inventario[\"Origen\"].isin([\"DEAA\", \"DEAB\"])]\n",
					"\n",
					"df_inventario = df_inventario.groupby([\"Origen\", \"Almacen\", \n",
					"                                       \"SKU\", \"Lote\"]).agg({\"Inventario Unidades\":\"sum\"}).reset_index()\n",
					"\n",
					"df_inventario[\"SKU\"] = df_inventario[\"SKU\"].apply(str)\n",
					"\n",
					"df_inventario = df_inventario.merge(df_param_sku[[\"SKU\", \"Empaques Pallet\", \n",
					"                                                  \"Tipo Pallet\", \"Toneladas Pallet\"]],\n",
					"                                    left_on = [\"SKU\"],\n",
					"                                    right_on = [\"SKU\"])\n",
					"\n",
					"df_inventario[\"Inventario Pallets\"] = df_inventario[\"Inventario Unidades\"] / df_inventario[\"Empaques Pallet\"]\n",
					"\n",
					"df_inventario[\"Inventario Pallets\"] = df_inventario[\"Inventario Pallets\"].apply(math.floor)\n",
					"\n",
					"df_inventario = df_inventario[(df_inventario[\"Toneladas Pallet\"] >= min_peso_inventario) & \n",
					"                              (df_inventario[\"Toneladas Pallet\"] <= max_peso_inventario)]\n",
					"\n",
					"df_demanda = dl.read_excel(path = url + container + '/' + local_inputs_path,\n",
					"                            file_name = name_demanda + sas_key,\n",
					"                            sheet_number = 0,\n",
					"                            limit_columns = ['Cod. Depot', 'Codigo Sap', 'Categoría',\n",
					"                                             'Day', 'Volumen'],\n",
					"                            rename_columns = ['Destino', 'SKU', 'Tipo', \n",
					"                                              'Fecha', 'HL'])\n",
					"\n",
					"df_demanda = df_demanda[df_demanda['Fecha'] == demanda_date]\n",
					"\n",
					"df_demanda['Fecha'] = df_demanda['Fecha'].dt.strftime('%Y-%m-%d')\n",
					"\n",
					"df_demanda['SKU'] = df_demanda['SKU'].apply(str)\n",
					"\n",
					"df_demanda = df_demanda.merge(df_param_sku[['SKU', 'Tipo Pallet', 'Toneladas Pallet', 'HL Pallet']],\n",
					"                              left_on = ['SKU'],\n",
					"                              right_on = ['SKU'])\n",
					"\n",
					"df_demanda['Pallets Demanda'] = round(df_demanda['HL'] / df_demanda['HL Pallet'])\n",
					"\n",
					"df_demanda = df_demanda[df_demanda['Pallets Demanda'] > 0]\n",
					"\n",
					"df_demanda['Tipo Pallet'] = df_demanda['Tipo Pallet'].str.split()\n",
					"\n",
					"df_demanda = df_demanda.merge(df_inventario[['Origen', 'SKU', 'Inventario Pallets']],\n",
					"                             left_on = ['SKU'],\n",
					"                             right_on = ['SKU'])\n",
					"\n",
					"df_demanda = df_demanda[df_demanda['Pallets Demanda'] <= df_demanda['Inventario Pallets']]\n",
					"\n",
					"df_demanda = df_demanda[['Origen', 'Destino', 'SKU', 'Fecha', 'Tipo Pallet', 'Toneladas Pallet', 'Pallets Demanda']]\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Preparación de datos\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"df_flota = df_flota_disponible.copy()    \n",
					"print(df_flota['Carga min'])\n",
					"print(df_flota.columns)\n",
					"\n",
					"\n",
					"list_assigned = []\n",
					"list_assigned_sap = []\n",
					"\n",
					"columns_name_standard = ['No Pedido', 'Origen', 'Destino', \n",
					"                         'SKU', 'Tipo Vehiculo', 'Tipo Pallet', \n",
					"                         'Placa', 'Pallets Asignados', 'Peso Asignado', \n",
					"                         'Peso Pallet', 'Pallets Sobrantes', 'Fuente Asignacion', \n",
					"                         'Parte vehículo', 'Tipo SKU']\n",
					"\n",
					"columns_name_sap = ['Pedido', 'Venta Distribuidor', 'Clase de Pedido',\n",
					"                    'Fecha Entrega', 'Org. Compras', 'Grupo Compras',\n",
					"                    'Centro Origen', 'Almacen Origen', 'Centro Destino',\n",
					"                    'Almacen Destino', 'Proveedor', 'Solicitante',\n",
					"                    'Material', 'Cantidad', 'Lote',\n",
					"                    'Transporte', 'Clase Transporte', 'Puesto Planificación',\n",
					"                    'Transportista', 'Vehículo', 'Gestión esp.',\n",
					"                    'Inicio Transporte', 'Fin Transporte', 'Identif. Ext. 1',\n",
					"                    'Texto Adicional 1', 'Texto Adicional 2', 'Texto Adicional 3',\n",
					"                    'Texto Adicional']\n",
					"\n",
					"count = 0\n",
					"\n",
					"df_result = pd.DataFrame()\n",
					"\n",
					"vehicles = ['JUMBO PLUS', 'JUMBO', 'JUMBO MEDIA', 'JUMBO 2021', 'SIDER']\n",
					"\n",
					"df_list = pd.DataFrame()\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Cubicación\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"for vehicle_type in vehicles:\n",
					"    \n",
					"    origenes = df_param_origenes[\"Origen\"].to_list()\n",
					"\n",
					"    df_origen_plan = []\n",
					"    \n",
					"    for origen in origenes:\n",
					"        df_origen_plan.append(df_plan_distribucion[df_plan_distribucion[\"Origen\"] == origen])\n",
					"    \n",
					"    df_origen_flota = []\n",
					"    \n",
					"    for origen in origenes:\n",
					"        df_origen_flota.append(df_flota_disponible[df_flota_disponible[\"Origen\"] == origen])\n",
					"    \n",
					"    for list_plan, list_flota in zip(df_origen_plan, df_origen_flota):       \n",
					"        print(list_plan, list_flota) \n",
					"    \n",
					"    for list_plan, list_flota in zip(df_origen_plan, df_origen_flota): # Garantizamos que los resultados se aislan por origen\n",
					"\n",
					"        current_priority = 0\n",
					"        \n",
					"        num_origenes = list_plan[\"Origen\"].size\n",
					"\n",
					"        for x in range(num_origenes):                                   # para cada i registros, en cada origen con cada flota, para cada vehiculo\n",
					"            if list_plan[\"Origen\"].count() > 0:                         # si los origenes no son varcios \n",
					"    \n",
					"                band = True\n",
					"                current_priority = current_priority + 1\n",
					"        \n",
					"                \n",
					"                list_plan = list_plan.sort_values(by = [\"Prioridad\"]) # Reordenamos los valores del plan de distribución\n",
					"                list_plan = list_plan.reset_index(drop = True)   \n",
					"    \n",
					"                list_plan[\"Prioridad_Origen\"] = list_plan[\"Prioridad\"].index + 1\n",
					"                \n",
					"                current_origin = str(list_plan.loc[list_plan[\"Prioridad_Origen\"] == current_priority, \"Origen\"].values[0])\n",
					"                current_destination = str(list_plan.loc[list_plan[\"Prioridad_Origen\"] == current_priority, \"Destino\"].values[0])\n",
					"                current_sku = str(list_plan.loc[list_plan[\"Prioridad_Origen\"] == current_priority, \"SKU\"].values[0])\n",
					"                \n",
					"                current_num_pallets = int(df_plan_distribucion.loc[(df_plan_distribucion[\"Origen\"] == current_origin) &\n",
					"                                                                   (df_plan_distribucion[\"Destino\"] == current_destination) &\n",
					"                                                                   (df_plan_distribucion[\"SKU\"] == current_sku), \"Pallets Demanda\"].values[0])\n",
					"                \n",
					"                current_pallet_type = str(list_plan.loc[list_plan[\"Prioridad_Origen\"] == current_priority, \"Tipo Pallet\"].values[0]) \n",
					"                priority = str(list_plan.loc[list_plan[\"Prioridad_Origen\"] == current_priority, \"Prioridad_Origen\"].values[0])\n",
					"                priority_aux = str(list_plan.loc[list_plan[\"Prioridad_Origen\"] == current_priority, \"Prioridad\"].values[0])\n",
					"                current_weight_pallet = float(list_plan.loc[list_plan[\"Prioridad_Origen\"] == current_priority, \"Toneladas Pallet\"].values[0])\n",
					"            \n",
					"                list_current_destination = df_plan_distribucion[(df_plan_distribucion[\"Destino\"] == current_destination) &  ## SKUs que comparten misma ruta (Origen / Destino)\n",
					"                                                                (df_plan_distribucion[\"SKU\"] != current_sku)]\n",
					"\n",
					"                while band:\n",
					"                    \n",
					"                    list_candidatos = [] # Determina qué asignaciones se quedan y cuáles serán descartadas\n",
					"  \n",
					"                    ################################################\n",
					"                    #           Verificar tipo de vehiculo         #\n",
					"                    ################################################\n",
					" \n",
					"                    if ft.is_type(vehicle_type, current_origin, current_num_pallets, current_weight_pallet, current_pallet_type, config):   # si existe un vehiculo con los atributos adecuados\n",
					"                        \n",
					"                        principal_slots = int(config[vehicle_type]['slots_uno'])\n",
					"                        secondary_slots = int(config[vehicle_type]['slots_media'])\n",
					"                        extra_slots = int(config[vehicle_type]['extra_slots'])   # Carreta extra\n",
					"                        \n",
					"                        # determina el espacio por vehiculo\n",
					"                        if vehicle_type == 'JUMBO PLUS':\n",
					"                            total_slots = principal_slots + secondary_slots + 8                 # el jumbo plus es el unico que tiene carreta, 8 espacios disponibles.   \n",
					"                        else:\n",
					"                            total_slots = principal_slots + secondary_slots\n",
					"                        \n",
					"                        principal_pallets_assigned = 0\n",
					"                        complementary_pallets_assigned = 0\n",
					"                        secondary_pallets_assigned = 0\n",
					"                        extra_pallets_assigned = 0 # Carreta extra\n",
					"                        inv_pallets_assigned = 0\n",
					"                        demanda_pallets_assigned = 0\n",
					"                        \n",
					"                        total_pallets_assigned = 0\n",
					"                        \n",
					"                        \n",
					"                        principal_weight_assigned = 0\n",
					"                        complementary_weight_assigned = 0\n",
					"                        secondary_weight_assigned = 0\n",
					"                        extra_weight_assigned = 0 # Carreta extra\n",
					"                        inv_weight_assigned = 0\n",
					"                        demanda_weight_assigned = 0\n",
					"                        \n",
					"                        principal_assigned = False\n",
					"                        complementary_assigned = False\n",
					"                        secondary_assigned = False\n",
					"                        extra_assigned = False # Carreta extra\n",
					"                        inv_assigned = False\n",
					"                        demanda_assigned = False\n",
					"\n",
					"                        total_weight_assigned = 0\n",
					"                        \n",
					"                        if ft.fleet_count(current_origin, vehicle_type, df_flota) > 0:                  # la cantidad de vehiculos con mismo origen\n",
					"     \n",
					"                            fleet = ft.get_fleet(current_origin, vehicle_type, df_flota).values[0]      # Obtiene el primer vehiculo de 'tipo' (jumbo plus, ejem.) del mismo origen\n",
					"\n",
					"                            plate = fleet[3]\n",
					"                            min_weight = fleet[9]\n",
					"                            max_weight = fleet[10]\n",
					"\n",
					"                            no_pedido = '_' + str(32) + str(today).replace(\"-\", \"\") + str(count)        # Generacion del ID de pedido\n",
					"                            \n",
					"                            if vehicle_type == 'JUMBO PLUS':\n",
					"                                fleet_weight = 35000.0\n",
					"                                extra_fleet_weight = fleet[9]\n",
					"                            else:\n",
					"                                fleet_weight = fleet[9]\n",
					"                                extra_fleet_weight = 0\n",
					"                            \n",
					"                            vehicle = v.Vehicle(origin = current_origin, \n",
					"                                                destination = current_destination, \n",
					"                                                vehicle_type = vehicle_type, \n",
					"                                                plate = plate, \n",
					"                                                weight = fleet_weight,\n",
					"                                                max_weight = max_weight,\n",
					"                                                extra_weight = extra_fleet_weight, \n",
					"                                                slots = principal_slots + secondary_slots,\n",
					"                                                extra_slots = extra_slots)\n",
					"                            \n",
					"                            ################################################\n",
					"                            #       Asignación de pallet principal         #\n",
					"                            ################################################\n",
					"                            PesoReal =    0                        \n",
					"                            for pallet in range(principal_slots):\n",
					"                            \n",
					"                                if vehicle.get_assigned() < (principal_slots) and total_weight_assigned <= max_weight and current_num_pallets > 0:\n",
					"                                    # Si hay espacio, y el \n",
					"                                    # Asignación principal, dejamos que asigne el peso que quiera en este caso\n",
					"                                \n",
					"                                    vehicle.set_assigned(vehicle.get_assigned() + 1)\n",
					"                                    vehicle.set_weight(vehicle.get_weight() - current_weight_pallet)\n",
					"                                    \n",
					"                                    current_num_pallets = current_num_pallets - 1 # !!!\n",
					"                                    \n",
					"                                    principal_pallets_assigned = principal_pallets_assigned + 1\n",
					"                                    principal_weight_assigned = principal_weight_assigned + current_weight_pallet\n",
					"                                    principal_assigned = True\n",
					"                                    \n",
					"                            if principal_assigned:\n",
					"                                \n",
					"                                total_weight_assigned = total_weight_assigned + principal_weight_assigned\n",
					"                                \n",
					"                                total_pallets_assigned = total_pallets_assigned + principal_pallets_assigned\n",
					"                                 \n",
					"                                list_assigned.append([no_pedido, current_origin, current_destination, current_sku, vehicle_type, current_pallet_type + '.', plate, principal_pallets_assigned, principal_weight_assigned, current_weight_pallet ,current_num_pallets,  'PlanDistribucion', 'Base', 'Principal'])\n",
					"                                \n",
					"                                list_candidatos.append([no_pedido, current_origin, current_destination, current_sku, vehicle_type, current_pallet_type + '.', plate, principal_pallets_assigned, principal_weight_assigned, current_weight_pallet ,current_num_pallets, 'PlanDistribucion', 'Base', 'Principal'])\n",
					"                                \n",
					"                                list_assigned_sap.append([no_pedido, 'N', 'ZINT',\n",
					"                                                         str(today + datetime.timedelta(1)), 'EC00', '003', \n",
					"                                                         current_origin, '1108', current_destination,\n",
					"                                                         '1108', 'IDEAB', ' ', current_sku,\n",
					"                                                         principal_pallets_assigned, 'CN', 'Y',\n",
					"                                                         'ZEC3', 'DEAB', 'Transportista', vehicle_type,\n",
					"                                                         '0001', str(today + datetime.timedelta(1)), str(today + datetime.timedelta(1)), ' ',\n",
					"                                                         '1', 'Texto Adicional 2', 'Texto Adicional 3', 'Texto  Adicional 4'])\n",
					"                                \n",
					"                                df_plan_distribucion.loc[((df_plan_distribucion['SKU'] == current_sku) &  # Ok\n",
					"                                                          (df_plan_distribucion['Origen'] == current_origin) &\n",
					"                                                          (df_plan_distribucion['Destino'] == current_destination)), 'Pallets Demanda'] = current_num_pallets\n",
					"                                \n",
					"                                principal_pallets_assigned = 0\n",
					"                                principal_weight_assigned = 0\n",
					"                                principal_assigned = False\n",
					"                            \n",
					"                            ################################################\n",
					"                            #  Asignación de pallet complemento principal  #\n",
					"                            ################################################\n",
					"                            \n",
					"                            if vehicle.get_assigned() < principal_slots: # Verificamos si aun queda algo de espacio en el principal\n",
					"                                \n",
					"                                if len(list_current_destination) > 0:\n",
					"                                    \n",
					"                                    for item in sorted(list_current_destination.values.tolist(), key = lambda x: x[8], reverse = True):\n",
					"                                        \n",
					"                                        complementary_pallet_type = item[6]\n",
					"                                        complementary_sku = item[3]\n",
					"                                        complementary_num_pallets = item[4]\n",
					"                                        complementary_pallet_weight = item[8]\n",
					"                                        \n",
					"                                        if complementary_pallet_type == current_pallet_type: # Debe restringirse al mismo tipo de pallet para la asignación principal\n",
					"                                            \n",
					"                                            for complementary_pallet in range(complementary_num_pallets):\n",
					"                                                if  vehicle.get_assigned() < principal_slots and total_weight_assigned <= max_weight and complementary_num_pallets > 0:\n",
					"                                                    \n",
					"                                                    vehicle.set_assigned(vehicle.get_assigned() + 1)\n",
					"                                                    vehicle.set_weight(vehicle.get_weight() - complementary_pallet_weight)\n",
					"                                                    \n",
					"                                                    complementary_pallets_assigned = complementary_pallets_assigned + 1\n",
					"                                                    complementary_weight_assigned = complementary_weight_assigned + complementary_pallet_weight\n",
					"                                                    complementary_num_pallets = complementary_num_pallets - 1   \n",
					"                                                    \n",
					"                                                    complementary_assigned = True\n",
					"                                        \n",
					"                                                    \n",
					"                                        if complementary_assigned:\n",
					"                                            \n",
					"                                            total_weight_assigned = total_weight_assigned + complementary_weight_assigned\n",
					"                                            \n",
					"                                            total_pallets_assigned = total_pallets_assigned + complementary_pallets_assigned\n",
					"                                \n",
					"                                            list_assigned.append([no_pedido, current_origin, current_destination,complementary_sku, vehicle_type, complementary_pallet_type + '.', plate, complementary_pallets_assigned, complementary_weight_assigned, complementary_pallet_weight, complementary_num_pallets, 'PlanDistribucion', 'Base', 'Complemento'])\n",
					"                                            \n",
					"                                            list_candidatos.append([no_pedido, current_origin, current_destination,complementary_sku, vehicle_type, complementary_pallet_type + '.', plate, complementary_pallets_assigned, complementary_weight_assigned, complementary_pallet_weight, complementary_num_pallets, 'PlanDistribucion', 'Base', 'Complemento'])\n",
					"                                            \n",
					"                                            \n",
					"                                            list_assigned_sap.append([no_pedido, 'N', 'ZINT', str(today + datetime.timedelta(1)), 'EC00', '003', current_origin, '1108', current_destination,'1108', 'IDEAB', ' ', complementary_sku, complementary_pallets_assigned, 'CN', 'Y','ZEC3', 'DEAB', 'Transportista', vehicle_type,'0001', str(today + datetime.timedelta(1)), str(today + datetime.timedelta(1)), ' ', '1', 'Texto Adicional 2', 'Texto Adicional 3', 'Texto  Adicional 4'])\n",
					"                                            \n",
					"                                            \n",
					"                                            df_plan_distribucion.loc[((df_plan_distribucion['SKU'] == complementary_sku) &\n",
					"                                                                      (df_plan_distribucion['Origen'] == current_origin) &\n",
					"                                                                      (df_plan_distribucion['Destino'] == current_destination)), 'Pallets Demanda'] = complementary_num_pallets\n",
					"                                            \n",
					"                                            \n",
					"                                            list_current_destination.loc[((list_current_destination['SKU'] == complementary_sku) &          \n",
					"                                                                          (list_current_destination['Origen'] == current_origin) &\n",
					"                                                                          (list_current_destination['Destino'] == current_destination)), 'Pallets Demanda'] = complementary_num_pallets\n",
					"                                            \n",
					"                                            complementary_pallets_assigned = 0\n",
					"                                            complementary_weight_assigned = 0\n",
					"                                            complementary_assigned = False\n",
					"                                             \n",
					"                                        \n",
					"                            ################################################\n",
					"                            #   Asignación de pallet demanda a principal   #\n",
					"                            ################################################\n",
					"                        \n",
					"                            if vehicle.get_assigned() < principal_slots:\n",
					"    \n",
					"                                df_demanda_aux = df_demanda[(df_demanda[\"Origen\"] == current_origin) & (df_demanda[\"Destino\"] == current_destination)]\n",
					"                                \n",
					"                                items_demanda = df_demanda_aux.values.tolist()\n",
					"    \n",
					"                                for item in sorted(items_demanda, key = lambda x: x[6], reverse = True):\n",
					"    \n",
					"                                    demanda_pallet_type = item[4][0]\n",
					"                                    demanda_sku = item[2]\n",
					"                                    demanda_num_pallets = int(item[6])\n",
					"                                    demanda_pallet_weight = item[5]\n",
					"                                    \n",
					"                                    if demanda_pallet_type == current_pallet_type: # Debe restringirse al mismo tipo de pallet para la asignación principal\n",
					"                                        \n",
					"                                        for demanda_pallet in range(max_inv_pallets):\n",
					"                                    \n",
					"                                            if  vehicle.get_assigned() < principal_slots and demanda_weight_assigned <= max_weight and demanda_num_pallets > 0:\n",
					"                                                \n",
					"                                                vehicle.set_assigned(vehicle.get_assigned() + 1)\n",
					"                                                vehicle.set_weight(vehicle.get_weight() - demanda_pallet_weight)\n",
					"                                                \n",
					"                                                demanda_pallets_assigned = demanda_pallets_assigned + 1\n",
					"                                                demanda_weight_assigned = demanda_weight_assigned + demanda_pallet_weight\n",
					"                                                demanda_num_pallets = demanda_num_pallets - 1   \n",
					"                                                \n",
					"                                                demanda_assigned = True\n",
					"                                    else:\n",
					"                                        pass\n",
					"                                    \n",
					"                                                \n",
					"                                    if demanda_assigned:\n",
					"                                        \n",
					"                                        total_weight_assigned = total_weight_assigned + demanda_weight_assigned\n",
					"                                        \n",
					"                                        total_pallets_assigned = total_pallets_assigned + demanda_pallets_assigned\n",
					"                            \n",
					"                                        list_assigned.append([no_pedido, current_origin, current_destination, demanda_sku, vehicle_type, demanda_pallet_type + '.', plate, demanda_pallets_assigned, demanda_weight_assigned, demanda_pallet_weight, demanda_num_pallets, 'Demanda', 'Base', 'Principal'])\n",
					"                                        \n",
					"                                        list_candidatos.append([no_pedido, current_origin, current_destination, demanda_sku, vehicle_type, demanda_pallet_type + '.', plate, demanda_pallets_assigned, demanda_weight_assigned, demanda_pallet_weight, demanda_num_pallets, 'Demanda', 'Base', 'Principal'])\n",
					"                                        \n",
					"                                        \n",
					"                                        list_assigned_sap.append([no_pedido, 'N', 'ZINT',\n",
					"                                                                 str(today + datetime.timedelta(1)), 'EC00', '003', \n",
					"                                                                 current_origin, '1108', current_destination,\n",
					"                                                                 '1108', 'IDEAB', ' ', demanda_sku,\n",
					"                                                                 demanda_pallets_assigned, 'CN', 'Y',\n",
					"                                                                 'ZEC3', 'DEAB', 'Transportista', vehicle_type,\n",
					"                                                                 '0001', str(today + datetime.timedelta(1)), str(today + datetime.timedelta(1)), ' ',\n",
					"                                                                 '1', 'Texto Adicional 2', 'Texto Adicional 3', 'Texto  Adicional 4'])\n",
					"                                        \n",
					"                                        \n",
					"                                        df_demanda.loc[((df_demanda['SKU'] == demanda_sku) &\n",
					"                                                        (df_demanda['Origen'] == current_origin) &\n",
					"                                                          (df_demanda['Destino'] == current_destination)), 'Pallets Demanda'] = demanda_num_pallets\n",
					"                                        \n",
					"                                        demanda_pallets_assigned = 0\n",
					"                                        demanda_weight_assigned = 0\n",
					"                                        demanda_assigned = False\n",
					"    \n",
					"                            ################################################\n",
					"                            #       Asignación de pallet secundario        #\n",
					"                            ################################################\n",
					"                            \n",
					"                            aux = 0\n",
					"                            if secondary_slots > 0:  # Si el vehículo permite asignación de un secundario entonces buscar\n",
					"    \n",
					"                                if len(list_current_destination) > 0: # Verificamos que exista algun sku alternativo para completar los slots secundarios\n",
					"        \n",
					"                                    for item in list_current_destination.values:\n",
					"                                        secondary_pallet_type = item[6]\n",
					"                                        secondary_sku = item[3]\n",
					"                                        secondary_num_pallets = item[4]\n",
					"                                        secondary_pallet_weight = item[8]\n",
					"        \n",
					"                                        if secondary_pallet_type != current_pallet_type and secondary_num_pallets > 0:\n",
					"        \n",
					"                                            for secondary_pallet in range(secondary_num_pallets):\n",
					"        \n",
					"                                                if vehicle.get_assigned() < total_slots and total_weight_assigned <= max_weight :\n",
					"                                                    \n",
					"                                                    vehicle.set_assigned(vehicle.get_assigned() + 1)\n",
					"                                                    vehicle.set_weight(vehicle.get_weight() - secondary_pallet_weight)\n",
					"                                                    \n",
					"                                                    secondary_pallets_assigned = secondary_pallets_assigned + 1\n",
					"                                                    secondary_weight_assigned = secondary_weight_assigned + secondary_pallet_weight\n",
					"                                                    secondary_num_pallets = secondary_num_pallets - 1\n",
					"                                                    \n",
					"                                                    secondary_assigned = True\n",
					"                                                    \n",
					"                                        if secondary_assigned:\n",
					"                                            \n",
					"                                            aux = 1\n",
					"                                            \n",
					"                                            total_weight_assigned = total_weight_assigned + secondary_weight_assigned\n",
					"                                            \n",
					"                                            total_pallets_assigned = total_pallets_assigned + secondary_pallets_assigned\n",
					"                                            \n",
					"                                            list_assigned.append([no_pedido, current_origin, current_destination, secondary_sku, vehicle_type, secondary_pallet_type + '.', plate, secondary_pallets_assigned, secondary_weight_assigned, secondary_pallet_weight, secondary_num_pallets, 'PlanDistribucion', 'Base', 'Secundario'])\n",
					"                                            \n",
					"                                            list_candidatos.append([no_pedido, current_origin, current_destination, secondary_sku, vehicle_type, secondary_pallet_type + '.', plate, secondary_pallets_assigned, secondary_weight_assigned, secondary_pallet_weight, secondary_num_pallets, 'PlanDistribucion', 'Base', 'Secundario'])\n",
					"                                            \n",
					"                                            \n",
					"                                            list_assigned_sap.append([no_pedido, 'N', 'ZINT',\n",
					"                                                                     str(today + datetime.timedelta(1)), 'EC00', '003', \n",
					"                                                                     current_origin, '1108', current_destination,\n",
					"                                                                     '1108', 'IDEAB', ' ', secondary_sku,\n",
					"                                                                     secondary_pallets_assigned, 'CN', 'Y',\n",
					"                                                                     'ZEC3', 'DEAB', 'Transportista', vehicle_type,\n",
					"                                                                     '0001', str(today + datetime.timedelta(1)), str(today + datetime.timedelta(1)), ' ',\n",
					"                                                                     '1', 'Texto Adicional 2', 'Texto Adicional 3', 'Texto  Adicional 4'])\n",
					"                                            \n",
					"                                            \n",
					"                                            \n",
					"                                            df_plan_distribucion.loc[(df_plan_distribucion['SKU'] == secondary_sku) &\n",
					"                                                                      (df_plan_distribucion['Origen'] == current_origin) &\n",
					"                                                                      (df_plan_distribucion['Destino'] == current_destination), 'Pallets Demanda'] = secondary_num_pallets\n",
					"                                            \n",
					"                                            \n",
					"                                            secondary_pallets_assigned = 0\n",
					"                                            secondary_weight_assigned = 0\n",
					"                                            secondary_assigned = False\n",
					"                                            \n",
					"                                            break\n",
					"                                    \n",
					"                            \n",
					"                                if aux == 0:\n",
					"                                    df_demanda_aux = df_demanda[(df_demanda[\"Origen\"] == current_origin) & (df_demanda[\"Destino\"] == current_destination)]\n",
					"                                \n",
					"                                    items_demanda = df_demanda_aux.values.tolist()\n",
					"    \n",
					"                                    for item in sorted(items_demanda, key = lambda x: x[6], reverse = True):\n",
					"    \n",
					"                                        demanda_pallet_type = item[4][0]\n",
					"                                        demanda_sku = item[2]\n",
					"                                        demanda_num_pallets = int(item[6])\n",
					"                                        demanda_pallet_weight = item[5]\n",
					"                                        \n",
					"                                        if demanda_pallet_type != current_pallet_type: # Debe restringirse al mismo tipo de pallet para la asignación principal\n",
					"                                            \n",
					"                                            for demanda_pallet in range(max_inv_pallets):\n",
					"                                            \n",
					"                                                if  vehicle.get_assigned() < total_slots and total_weight_assigned <= max_weight and demanda_num_pallets > 0:\n",
					"                                                    \n",
					"                                                    vehicle.set_assigned(vehicle.get_assigned() + 1)\n",
					"                                                    vehicle.set_weight(vehicle.get_weight() - demanda_pallet_weight)\n",
					"                                                    \n",
					"                                                    demanda_pallets_assigned = demanda_pallets_assigned + 1\n",
					"                                                    demanda_weight_assigned = demanda_weight_assigned + demanda_pallet_weight\n",
					"                                                    demanda_num_pallets = demanda_num_pallets - 1   \n",
					"                                                    \n",
					"                                                    demanda_assigned = True\n",
					"                                        else:\n",
					"                                            pass\n",
					"                                        \n",
					"                                                    \n",
					"                                        if demanda_assigned:\n",
					"    \n",
					"                                            total_weight_assigned = total_weight_assigned + demanda_weight_assigned\n",
					"                                            \n",
					"                                            total_pallets_assigned = total_pallets_assigned + demanda_pallets_assigned\n",
					"                                \n",
					"                                            list_assigned.append([no_pedido, current_origin, current_destination, demanda_sku, vehicle_type, demanda_pallet_type + '.', plate, demanda_pallets_assigned, demanda_weight_assigned, demanda_pallet_weight, demanda_num_pallets, 'Demanda', 'Base', 'Secundario'])\n",
					"                                            \n",
					"                                            list_candidatos.append([no_pedido, current_origin, current_destination, demanda_sku, vehicle_type, demanda_pallet_type + '.', plate, demanda_pallets_assigned, demanda_weight_assigned, demanda_pallet_weight, demanda_num_pallets, 'Demanda', 'Base', 'Secundario'])\n",
					"                                            \n",
					"                                            \n",
					"                                            \n",
					"                                            list_assigned_sap.append([no_pedido, 'N', 'ZINT',\n",
					"                                                     str(today + datetime.timedelta(1)), 'EC00', '003', \n",
					"                                                     current_origin, '1108', current_destination,\n",
					"                                                     '1108', 'IDEAB', ' ', demanda_sku,\n",
					"                                                     demanda_pallets_assigned, 'CN', 'Y',\n",
					"                                                     'ZEC3', 'DEAB', 'Transportista', vehicle_type,\n",
					"                                                     '0001', str(today + datetime.timedelta(1)), str(today + datetime.timedelta(1)), ' ',\n",
					"                                                     '1', 'Texto Adicional 2', 'Texto Adicional 3', 'Texto  Adicional 4'])\n",
					"                                            \n",
					"                                            \n",
					"                                            df_demanda.loc[((df_demanda['SKU'] == demanda_sku) &\n",
					"                                                            (df_demanda['Origen'] == current_origin) &\n",
					"                                                              (df_demanda['Destino'] == current_destination)), ['Pallets Demanda']] = demanda_num_pallets\n",
					"     \n",
					"                                            # print('Pallets complementarios asignados: ' + str(complementary_pallets_assigned))\n",
					"                                            # print('Peso complementario asignado: ' + str(complementary_weight_assigned))\n",
					"                                            \n",
					"                                            demanda_pallets_assigned = 0\n",
					"                                            demanda_weight_assigned = 0\n",
					"                                            demanda_assigned = False\n",
					"                                    \n",
					"                            \n",
					"                            ################################################\n",
					"                            #   Asignación de pallet principal a carreta   #\n",
					"                            ################################################\n",
					"    \n",
					"                            carreta_extra = config[vehicle_type].getboolean('carreta_extra')\n",
					"                            \n",
					"                            if carreta_extra: # Solo aplica para este tipo porque tiene una carreta extra de 8 pallets\n",
					"                            \n",
					"                                if current_num_pallets >= 1: # Verificamos si aun hay pallets que puedan mandarse a la carreta extra\n",
					"                                    for pallet in range(current_num_pallets):\n",
					"                                        if vehicle.get_extra_assigned() < 8 and total_weight_assigned <= max_weight :\n",
					"                                            \n",
					"                                            vehicle.set_extra_assigned(vehicle.get_extra_assigned() + 1)\n",
					"                                            vehicle.set_extra_weight(vehicle.get_extra_weight() - current_weight_pallet)\n",
					"                                            \n",
					"                                            extra_pallets_assigned = extra_pallets_assigned + 1                                        \n",
					"                                            extra_weight_assigned = extra_weight_assigned + current_weight_pallet\n",
					"                                            current_num_pallets = current_num_pallets - 1\n",
					"                                            \n",
					"                                            extra_assigned = True\n",
					"                                            \n",
					"                                            \n",
					"                                    if extra_assigned:\n",
					"                                        \n",
					"                                        total_weight_assigned = total_weight_assigned + extra_weight_assigned\n",
					"                                        \n",
					"                                        total_pallets_assigned = total_pallets_assigned + extra_pallets_assigned\n",
					"        \n",
					"                                        list_assigned.append([no_pedido, current_origin, current_destination, current_sku, vehicle_type, current_pallet_type + '.', plate, extra_pallets_assigned, extra_weight_assigned, current_weight_pallet, current_num_pallets, 'PlanDistribucion', 'Carreta', 'Principal'])\n",
					"                                        \n",
					"                                        list_candidatos.append([no_pedido, current_origin, current_destination, current_sku, vehicle_type, current_pallet_type + '.', plate, extra_pallets_assigned, extra_weight_assigned, current_weight_pallet, current_num_pallets, 'PlanDistribucion', 'Carreta', 'Principal'])\n",
					"                                        \n",
					"                                        \n",
					"                                        \n",
					"                                        list_assigned_sap.append([no_pedido, 'N', 'ZINT',\n",
					"                                                     str(today + datetime.timedelta(1)), 'EC00', '003', \n",
					"                                                     current_origin, '1108', current_destination,\n",
					"                                                     '1108', 'IDEAB', ' ', current_sku,\n",
					"                                                     extra_pallets_assigned, 'CN', 'Y',\n",
					"                                                     'ZEC3', 'DEAB', 'Transportista', vehicle_type, \n",
					"                                                     '0001', str(today + datetime.timedelta(1)), str(today + datetime.timedelta(1)), ' ',\n",
					"                                                     '1', 'Texto Adicional 2', 'Texto Adicional 3', 'Texto  Adicional 4'])\n",
					"                                        \n",
					"                                        \n",
					"                                        df_plan_distribucion.loc[((df_plan_distribucion['SKU'] == current_sku) &\n",
					"                                                                  (df_plan_distribucion['Origen'] == current_origin) &\n",
					"                                                                  (df_plan_distribucion['Destino'] == current_destination)), 'Pallets Demanda'] = current_num_pallets\n",
					"                                        \n",
					"                                        \n",
					"                                        extra_pallets_assigned = 0                                  \n",
					"                                        extra_weight_assigned = 0\n",
					"                                        extra_assigned = False\n",
					"                                        \n",
					"                                #################################################\n",
					"                                # Asignación de pallet complementario a carreta #\n",
					"                                #################################################\n",
					"                                \n",
					"                                if vehicle.get_extra_assigned() < 8 and len(list_current_destination) > 0: # Asignamos pallets que sean del mismo tipo que el current si es que hay disponibles\n",
					"                                    \n",
					"                                    for item in sorted(list_current_destination.values.tolist(), key = lambda x: x[8], reverse = True):\n",
					"                                        extra_pallet_type = item[6]\n",
					"                                        extra_sku = item[3]\n",
					"                                        extra_num_pallets = item[4]\n",
					"                                        extra_pallet_weight = item[8]\n",
					"                                        \n",
					"                                        if extra_pallet_type == current_pallet_type:\n",
					"        \n",
					"                                            for extra_pallet in range(extra_num_pallets):\n",
					"                                                if vehicle.get_extra_assigned() < 8 and total_weight_assigned <= max_weight:\n",
					"                                                    \n",
					"                                                    vehicle.set_extra_assigned(vehicle.get_extra_assigned() + 1)\n",
					"                                                    vehicle.set_extra_weight(vehicle.get_extra_weight() - extra_pallet_weight)\n",
					"                                                    \n",
					"                                                    extra_pallets_assigned = extra_pallets_assigned + 1\n",
					"                                                    extra_weight_assigned = extra_weight_assigned + extra_pallet_weight\n",
					"                                                    extra_num_pallets = extra_num_pallets - 1\n",
					"                                                    extra_assigned = True\n",
					"                                                    \n",
					"                                                    \n",
					"                                        if extra_assigned:\n",
					"                                            \n",
					"                                            total_weight_assigned = total_weight_assigned + extra_weight_assigned\n",
					"                                            \n",
					"                                            total_pallets_assigned = total_pallets_assigned + extra_pallets_assigned\n",
					"                                            \n",
					"                                            list_assigned.append([no_pedido, current_origin, current_destination, extra_sku, vehicle_type, current_pallet_type + '.', plate, extra_pallets_assigned, extra_weight_assigned, extra_pallet_weight, current_num_pallets, 'PlanDistribucion', 'Carreta', 'Complementario'])\n",
					"    \n",
					"                                            list_candidatos.append([no_pedido, current_origin, current_destination, extra_sku, vehicle_type, current_pallet_type + '.', plate, extra_pallets_assigned, extra_weight_assigned, extra_pallet_weight, current_num_pallets, 'PlanDistribucion', 'Carreta', 'Complementario'])\n",
					"    \n",
					"                                            \n",
					"                                            list_assigned_sap.append([no_pedido, 'N', 'ZINT',\n",
					"                                                     str(today + datetime.timedelta(1)), 'EC00', '003', \n",
					"                                                     current_origin, '1108', current_destination,\n",
					"                                                     '1108', 'IDEAB', ' ', current_sku,\n",
					"                                                     extra_pallets_assigned, 'CN', 'Y',\n",
					"                                                     'ZEC3', 'DEAB', 'Transportista', vehicle_type,\n",
					"                                                     '0001', str(today + datetime.timedelta(1)), str(today + datetime.timedelta(1)), ' ',\n",
					"                                                     '1', 'Texto Adicional 2', 'Texto Adicional 3', 'Texto  Adicional 4'])\n",
					"                                            \n",
					"                                            \n",
					"                                            df_plan_distribucion.loc[(df_plan_distribucion['SKU'] == extra_sku) &\n",
					"                                                                      (df_plan_distribucion['Origen'] == current_origin) &\n",
					"                                                                      (df_plan_distribucion['Destino'] == current_destination), 'Pallets Demanda'] = extra_num_pallets\n",
					"                                                                                  \n",
					"                                            \n",
					"                                            list_current_destination.loc[((list_current_destination['SKU'] == extra_sku) &\n",
					"                                                                          (list_current_destination['Origen'] == current_origin) &\n",
					"                                                                          (list_current_destination['Destino'] == current_destination)), 'Pallets Demanda'] = extra_num_pallets\n",
					"                                            \n",
					"                                            \n",
					"                                            extra_pallets_assigned = 0                                  \n",
					"                                            extra_weight_assigned = 0\n",
					"                                            extra_assigned = False           \n",
					"                                            \n",
					"                                            # if vehicle.get_extra_assigned() < 8:\n",
					"                                            #     pass\n",
					"                                            # else:\n",
					"                                            #     break\n",
					"                                        \n",
					"                                ################################################\n",
					"                                #   Asignación de pallet demanda a carreta     #\n",
					"                                ################################################    \n",
					"    \n",
					"                                if vehicle.get_extra_assigned() < 8 and len(df_demanda[(df_demanda[\"Origen\"] == current_origin)].values.tolist()) > 0: # Asignamos pallets que sean del mismo tipo que el current si es que hay disponibles\n",
					"                                    \n",
					"                                    df_demanda_aux = df_demanda[(df_demanda[\"Origen\"] == current_origin) & (df_demanda[\"Destino\"] == current_destination)]\n",
					"                                \n",
					"                                    items_demanda = df_demanda_aux.values.tolist()\n",
					"    \n",
					"                                    for item in sorted(items_demanda, key = lambda x: x[6], reverse = True):\n",
					"    \n",
					"                                        demanda_pallet_type = item[4][0]\n",
					"                                        demanda_sku = item[2]\n",
					"                                        demanda_num_pallets = int(item[6])\n",
					"                                        demanda_pallet_weight = item[5]\n",
					"                                        \n",
					"                                        if demanda_pallet_type == current_pallet_type: # Debe restringirse al mismo tipo de pallet para la asignación principal\n",
					"                                            \n",
					"                                            for demanda_pallet in range(max_inv_pallets):\n",
					"                                            \n",
					"                                                if  vehicle.get_extra_assigned() < 8 and total_weight_assigned <= max_weight and demanda_num_pallets > 0:\n",
					"                                                    \n",
					"                                                    vehicle.set_extra_assigned(vehicle.get_extra_assigned() + 1)\n",
					"                                                    vehicle.set_extra_weight(vehicle.get_extra_weight() - demanda_pallet_weight)\n",
					"                                                    \n",
					"                                                    demanda_pallets_assigned = demanda_pallets_assigned + 1\n",
					"                                                    demanda_weight_assigned = demanda_weight_assigned + demanda_pallet_weight\n",
					"                                                    demanda_num_pallets = demanda_num_pallets - 1   \n",
					"                                                    \n",
					"                                                    demanda_assigned = True\n",
					"                                                    \n",
					"                                        else:\n",
					"                                            pass\n",
					"                                        \n",
					"                                                    \n",
					"                                        if demanda_assigned:\n",
					"                                            \n",
					"                                            total_weight_assigned = total_weight_assigned + demanda_weight_assigned\n",
					"                                \n",
					"                                            total_pallets_assigned = total_pallets_assigned + demanda_pallets_assigned\n",
					"                                \n",
					"                                            list_assigned.append([no_pedido, current_origin, current_destination, demanda_sku, vehicle_type, demanda_pallet_type + '.', plate, demanda_pallets_assigned, demanda_weight_assigned, demanda_pallet_weight, demanda_num_pallets, 'Demanda', 'Carreta', 'Principal'])\n",
					"                                            \n",
					"                                            list_candidatos.append([no_pedido, current_origin, current_destination, demanda_sku, vehicle_type, demanda_pallet_type + '.', plate, demanda_pallets_assigned, demanda_weight_assigned, demanda_pallet_weight, demanda_num_pallets, 'Demanda', 'Carreta', 'Principal'])\n",
					"                                            \n",
					"                                            \n",
					"                                            list_assigned_sap.append([no_pedido, 'N', 'ZINT',\n",
					"                                                     str(today + datetime.timedelta(1)), 'EC00', '003', \n",
					"                                                     current_origin, '1108', current_destination,\n",
					"                                                     '1108', 'IDEAB', ' ', demanda_sku,\n",
					"                                                     demanda_pallets_assigned, 'CN', 'Y',\n",
					"                                                     'ZEC3', 'DEAB', 'Transportista', vehicle_type,\n",
					"                                                     '0001', str(today + datetime.timedelta(1)), str(today + datetime.timedelta(1)), ' ',\n",
					"                                                     '1', 'Texto Adicional 2', 'Texto Adicional 3', 'Texto  Adicional 4'])\n",
					"                                            \n",
					"                                            \n",
					"                                            df_demanda.loc[((df_demanda['SKU'] == demanda_sku) &\n",
					"                                                            (df_demanda['Origen'] == current_origin) &\n",
					"                                                              (df_demanda['Destino'] == current_destination)), ['Pallets Demanda']] = demanda_num_pallets\n",
					"                                            \n",
					"                                            demanda_pallets_assigned = 0\n",
					"                                            demanda_weight_assigned = 0\n",
					"                                            demanda_assigned = False\n",
					"                                    \n",
					"                            ################################################\n",
					"                            #  Verificar si camion cumple con carga mínima #\n",
					"                            ################################################\n",
					"                            \n",
					"                            min_weight = float(config[vehicle_type]['min_weight'])\n",
					"\n",
					"                            if total_weight_assigned < min_weight or total_pallets_assigned > total_slots: # Si no cumple con el requisito mínimo será descartado\n",
					"                                print(list_candidatos)\n",
					"                                for item in list_candidatos:\n",
					"                                    discard_sku = item[3]\n",
					"                                    discard_origin = item[1]\n",
					"                                    discard_destination = item[2]\n",
					"                                    discard_pallets_assigned = item[7]\n",
					"    \n",
					"                                    if item[11] in ['PlanDistribucion']:\n",
					"                                        \n",
					"                                        df_plan_distribucion.loc[(df_plan_distribucion['Origen'] == discard_origin) &\n",
					"                                                                 (df_plan_distribucion['Destino'] == discard_destination) &\n",
					"                                                                 (df_plan_distribucion['SKU'] == discard_sku), 'Pallets Demanda'] = df_plan_distribucion['Pallets Demanda'] + discard_pallets_assigned\n",
					"                                        \n",
					"                                    elif item[11] in ['Demanda']:\n",
					"                                        df_demanda.loc[(df_demanda['Origen'] == discard_origin) &\n",
					"                                                        (df_demanda['Destino'] == discard_destination) &\n",
					"                                                        (df_demanda['SKU'] == discard_sku), 'Pallets Demanda'] = df_demanda['Pallets Demanda'] + discard_pallets_assigned\n",
					"                                \n",
					"                                list_assigned  = [el for el in list_assigned if el[0] not in (no_pedido)]\n",
					"                                \n",
					"                                list_assigned_sap  = [el for el in list_assigned_sap if el[0] not in (no_pedido)]\n",
					"                                \n",
					"                                band = False\n",
					"                                \n",
					"                            else:\n",
					"\n",
					"                                df_flota = df_flota[df_flota[\"Placa\"] != plate]\n",
					"                            \n",
					"                                count = count + 1\n",
					"                                \n",
					"                            if current_num_pallets == 0:\n",
					"                                band = False \n",
					"                                #del vehicle\n",
					"                        else:\n",
					"                            band = False\n",
					"                            # No hay camión\n",
					"                    else:\n",
					"                        band = False\n",
					"                        # No es del tipo\n",
					"                \n",
					"        df_assigned = pd.DataFrame(list_assigned, columns = columns_name_standard)\n",
					"        df_assigned_sap = pd.DataFrame(list_assigned_sap, columns = columns_name_sap)\n",
					"         \n",
					"        current_priority = 0\n",
					"\n",
					"        df_assigned_sap['Fecha Entrega'] = df_assigned_sap['Fecha Entrega'].str.replace('-', '.')\n",
					"        df_assigned_sap['Inicio Transporte'] = df_assigned_sap['Inicio Transporte'].str.replace('-', '.')\n",
					"        df_assigned_sap['Fin Transporte'] = df_assigned_sap['Fin Transporte'].str.replace('-', '.')\n",
					""
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Exportación de resultado\n",
					""
				],
				"attachments": null
			},
			{
				"cell_type": "code",
				"source": [
					"#df_assigned['nueva'] = [i for i in range(len(df_assigned))]\n",
					"\n",
					"pd.set_option(\"max_columns\", None)\n",
					"print(df_assigned)\n",
					"df_assigned.to_excel(output, sheet_name = 'Hoja1', index = False)\n",
					"\n",
					"blob_service_client = BlobServiceClient.from_connection_string(connect_str)\n",
					"blob_client = blob_service_client.get_blob_client(container=container_name, blob=output_file_name)\n",
					"\n",
					"blob_client.upload_blob(output.getvalue(), overwrite = True) # Escribe el resultado en el container especificado tomando los bytes\n",
					"\n",
					"print(df_assigned_sap)\n",
					"df_assigned_sap.to_excel(output, sheet_name = 'Hoja1', index = False)\n",
					"\n",
					"blob_service_client = BlobServiceClient.from_connection_string(connect_str)\n",
					"blob_client = blob_service_client.get_blob_client(container=container_name, blob=output_file_sap_name)\n",
					"\n",
					"blob_client.upload_blob(output.getvalue(), overwrite = True) # Escribe el resultado en el container especificado tomando los bytes"
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}